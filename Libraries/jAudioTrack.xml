<?xml version="1.0" encoding="UTF-8"?>
<root>
    <doclet-version-NOT-library-version>1.01</doclet-version-NOT-library-version>
    <class>
        <name>com.stevel05.JAudioTrack</name>
        <shortname>AudioTrack</shortname>
        <owner>process</owner>
        <event>Event</event>
        <method>
            <name>Release</name>
            <comment>Closes the line</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>Available</name>
            <comment>Obtains the number of bytes of data currently available 
 to the application for processing in the data line's internal buffer.</comment>
            <returntype>int</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment>Initialize the object</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>SampleRateHZ</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>SampleSizeInBits</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>ChannelConfig</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>AddLineListener</name>
            <comment>Adds a listener to this line.
 Callback to sub {EventName}_Event will be called when one of the following events has been raised:
 OPEN, CLOSE, START or STOP</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>Flush</name>
            <comment>Flushes queued data from the line.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>IsRunning</name>
            <comment>Indicates whether the line is running. The default is false. An open line begins running when the first data is presented in response to an invocation of the start method, 
 and continues until presentation ceases in response to a call to stop or because playback completes.</comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Start</name>
            <comment>Start playing data</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>IsActive</name>
            <comment>Indicates whether the line is engaging in active I/O (such as playback or capture). When an inactive line becomes active, it sends a START event to its listeners. 
 Similarly, when an active line becomes inactive, it sends a STOP event.</comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Write</name>
            <comment>Writes data ti the SourceDataLine, id more data is sent that it can read it will block the thread
 off = offset into array data
 Returns the actual number of bytes written</comment>
            <returntype>int</returntype>
            <parameter>
                <name>Data</name>
                <type>byte[]</type>
            </parameter>
            <parameter>
                <name>Off</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Len</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>Stop</name>
            <comment>Stop playing data</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>Drain</name>
            <comment>Drains queued data from the line by continuing data I/O until the data line's internal buffer has been emptied.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment>Is the Audiotrack initialized?</comment>
            <returntype>boolean</returntype>
        </method>
        <property>
            <name>LastException</name>
            <returntype>java.lang.String</returntype>
            <comment>If an error occurred get the last exception</comment>
        </property>
        <property>
            <name>Buffersize</name>
            <returntype>int</returntype>
            <comment>Get the buffer size of the SourceDataLine</comment>
        </property>
        <field>
            <name>CH_CONF_STEREO</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>CH_CONF_MONO</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
    </class>
    <version>1.0</version>
    <author>Steve Laming</author>
</root>
