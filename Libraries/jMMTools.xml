<?xml version="1.0" encoding="utf-8"?>
<root>
  <doclet-version-NOT-library-version>1.00</doclet-version-NOT-library-version>
  <dependsOn>jcore</dependsOn>
  <dependsOn>jfx</dependsOn>
  <class>
    <name>com.mathew.jmmtools.stringtools</name>
    <shortname>StringTools</shortname>
    <method>
      <name>IsInitialized</name>
      <comment>Tests whether the object has been initialized.</comment>
      <returntype>boolean</returntype>
    </method>
    <method>
      <name DesignerName="Abbreviate">_abbreviate</name>
      <comment>Returns the first ltter of each word in Input. </comment>
      <returntype>String</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="Abbreviate2">_abbreviate2</name>
      <comment>Similar to Abbreivate, but the output is uppercase only. </comment>
      <returntype>String</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="Abbreviate3">_abbreviate3</name>
      <comment>Similar to Abbreviate, but allows you to specifiy the pattern. </comment>
      <returntype>String</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Pattern</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="Abbreviate4">_abbreviate4</name>
      <comment>Similar to Abbreivate3, but the output is uppercase only. </comment>
      <returntype>String</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Pattern</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="AddSpaces">_addspaces</name>
      <comment>Returns a string of HowMany spaces</comment>
      <returntype>String</returntype>
      <parameter>
        <name>HowMany</name>
        <type>int</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="AposCheck">_aposcheck</name>
      <comment>Tests whether Input contains apostrohpes, and if so escapes them for SQL statements.</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="Append">_append</name>
      <comment>Appends the two strings</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Input2</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="Append2">_append2</name>
      <comment>Appends the two strings, adding whitespace if needed if AutoSpace is true</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Input2</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>AutoSpace</name>
        <type>boolean</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="AppendIfMissing">_appendifmissing</name>
      <comment>Appends suffix to the end of Input, if Suffix isn't already there. </comment>
      <returntype>String</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Suffix</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="AppendIfMissingIgnoreCase">_appendifmissingignorecase</name>
      <comment>Similar to AppendIfMissing, but ignore the case.</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Suffix</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="AppendIfMissingIgnoreCase2">_appendifmissingignorecase2</name>
      <comment>Similar to AppendIfMissing2, but ignores the case.</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Suffixes</name>
        <type>String[]</type>
      </parameter>
      <parameter>
        <name>Suffix</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="AppendIfMisssing2">_appendifmisssing2</name>
      <comment>Appends Suffix to the end of Input if Input ends with any of Suffixes.</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Suffixes</name>
        <type>String[]</type>
      </parameter>
      <parameter>
        <name>Suffix</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="ASCIICodes">_asciicodes</name>
      <comment>Returns a stirng containing the ASCII characters and their respective codes.</comment>
      <returntype>String</returntype>
    </method>
    <method>
      <name DesignerName="BestLevenshtein">_bestlevenshtein</name>
      <comment>Returns the best match From Input compared to Word. </comment>
      <returntype>String</returntype>
      <parameter>
        <name>Word</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Input</name>
        <type>String[]</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="BestLevenshtein2">_bestlevenshtein2</name>
      <comment>Similar to BestLevenshtein, but returns the closest matches. Any match that is below the threshold is included. </comment>
      <returntype>anywheresoftware.b4a.objects.collections.List</returntype>
      <parameter>
        <name>Word</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Input</name>
        <type>anywheresoftware.b4a.objects.collections.List</type>
      </parameter>
      <parameter>
        <name>Threshold</name>
        <type>int</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="CaeserCipherDecode">_caesercipherdecode</name>
      <returntype>String</returntype>
      <parameter>
        <name>Enc</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Offset</name>
        <type>int</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="CaeserCipherEncode">_caesercipherencode</name>
      <returntype>String</returntype>
      <parameter>
        <name>Enc</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Offset</name>
        <type>int</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="CalculateLove">_calculatelove</name>
      <comment>Returns the percentage compatibility between Name1 and Name2. </comment>
      <returntype>int</returntype>
      <parameter>
        <name>Name1</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Name2</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="CharacterCodes">_charactercodes</name>
      <comment>Returns the characters and their respective codes from 1 to Upper. </comment>
      <returntype>String</returntype>
      <parameter>
        <name>Upper</name>
        <type>int</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="CharacterCodes2">_charactercodes2</name>
      <comment>Similar to CharacterCodes, but the Lower limit can also be specified. </comment>
      <returntype>String</returntype>
      <parameter>
        <name>Lower</name>
        <type>int</type>
      </parameter>
      <parameter>
        <name>Upper</name>
        <type>int</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="CharToMorse">_chartomorse</name>
      <comment>Converts C to morse. </comment>
      <returntype>String</returntype>
      <parameter>
        <name>C</name>
        <type>char</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="CharToNATO">_chartonato</name>
      <comment>Converts a char to the NATO phonetic alphabety</comment>
      <returntype>String</returntype>
      <parameter>
        <name>C</name>
        <type>char</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="CharToWesternUnion">_chartowesternunion</name>
      <comment>Converts a char to the western Union Phonetic Alphabet.</comment>
      <returntype>String</returntype>
      <parameter>
        <name>C</name>
        <type>char</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="Chomp">_chomp</name>
      <comment>Removes 1 newline from the end if Input, if it is there, otherwise leaves Input alone</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="Chomp2">_chomp2</name>
      <comment>Removes 1 Separator from the end of Input, if it is there, otherwise leaves Input alone</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Separator</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="Chop">_chop</name>
      <comment>Removes the last character from Input</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="CodePointAfter">_codepointafter</name>
      <comment>Returns the Unicode code of the character 1 place after the given index</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Index</name>
        <type>int</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="CodePointAt">_codepointat</name>
      <comment>Returns the Unicode code of the character at the given index</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Index</name>
        <type>int</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="CodePointBefore">_codepointbefore</name>
      <comment>Returns the Unicode code of the character 1 place in front of the given index.</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Index</name>
        <type>int</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="CommonPrefixLength">_commonprefixlength</name>
      <comment>Returns the length of the common prefix.</comment>
      <returntype>int</returntype>
      <parameter>
        <name>Input1</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Input2</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="CommonPrefixLength2">_commonprefixlength2</name>
      <comment>Returns the length of the common prefix.</comment>
      <returntype>int</returntype>
      <parameter>
        <name>Inputs</name>
        <type>String[]</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="CompareToIgnoreCase">_comparetoignorecase</name>
      <comment>Compares Innput1 to Input2, ignoring case.</comment>
      <returntype>int</returntype>
      <parameter>
        <name>Input1</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Input2</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="Concat">_concat</name>
      <comment>Concatenates Input2 at the end of Input1. </comment>
      <returntype>String</returntype>
      <parameter>
        <name>Input1</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Input2</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="Contains">_contains</name>
      <comment>Returns true if Input contains SearchFor</comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>SearchFor</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="Contains2">_contains2</name>
      <comment>Returns true if Input contains SearchFor, ignoring case</comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>SearchFor</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>CaseSensitive</name>
        <type>boolean</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="ContainsAll">_containsall</name>
      <comment>Checks whether Input contains everything in earchFor.</comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>SearchFor</name>
        <type>String[]</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="ContainsAny">_containsany</name>
      <comment>Checks whether Input contains any one of SearchFor.</comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>SearchFor</name>
        <type>String[]</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="ContainsAnyIgnoreCase">_containsanyignorecase</name>
      <returntype>boolean</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>SearchFor</name>
        <type>String[]</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="ContainsNone">_containsnone</name>
      <comment>Returns true if Input contains none of the Inputs.</comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Inputs</name>
        <type>String[]</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="ContainsNumber">_containsnumber</name>
      <comment>Returns true if Input contains a number</comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="ContainsOnly">_containsonly</name>
      <comment>Returns true if Input contains only C. </comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>C</name>
        <type>char</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="ContainsRegex">_containsregex</name>
      <comment>Returns true if Input matches pattern</comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>Pattern</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Text</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>CaseSensitive</name>
        <type>boolean</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="ContainsRune">_containsrune</name>
      <comment>Tests whether Input contains the specified Unicode code point.</comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>CodePoint</name>
        <type>int</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="ContentEquals">_contentequals</name>
      <comment>Tests whehter Input1 is equal to Input2.</comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>Input1</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Input2</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="ContentEquals2">_contentequals2</name>
      <comment>Tests whether Input1 is equal to the contents of Input2.</comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>Input1</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Input2</name>
        <type>anywheresoftware.b4a.keywords.StringBuilderWrapper</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="ContentEquals3">_contentequals3</name>
      <comment>Tests whether the content of Input1 equals Input2.</comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>Input1</name>
        <type>anywheresoftware.b4a.keywords.StringBuilderWrapper</type>
      </parameter>
      <parameter>
        <name>Input2</name>
        <type>anywheresoftware.b4a.keywords.StringBuilderWrapper</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="ContentEqualsIgnoreCase">_contentequalsignorecase</name>
      <comment>Tests whether the content of Input1 equals Input2.</comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>Input1</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Input2</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="ContentEqualsIgnoreCase2">_contentequalsignorecase2</name>
      <comment>Tests whether the content of Input1 equals Input2.</comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>Input1</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Input2</name>
        <type>anywheresoftware.b4a.keywords.StringBuilderWrapper</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="ContentEqualsIgnoreCase3">_contentequalsignorecase3</name>
      <comment>Tests whether the content of Input1 equals Input2.</comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>Input1</name>
        <type>anywheresoftware.b4a.keywords.StringBuilderWrapper</type>
      </parameter>
      <parameter>
        <name>Input2</name>
        <type>anywheresoftware.b4a.keywords.StringBuilderWrapper</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="ConvertToTimeFormat">_converttotimeformat</name>
      <comment>Converts the given input in milliseconds to a string. Example: 3:05</comment>
      <returntype>String</returntype>
      <parameter>
        <name>MS</name>
        <type>int</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="Copy">_copy</name>
      <comment>Returns a copy of Input. </comment>
      <returntype>String</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="CountCharacters">_countcharacters</name>
      <comment>Returns a map where each key is the character and the value is the number of times it appears. </comment>
      <returntype>anywheresoftware.b4a.objects.collections.Map</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="CountLines">_countlines</name>
      <comment>Counts the number of lines in the given string.</comment>
      <returntype>int</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="CountMatches">_countmatches</name>
      <comment>Returns the number of times C occurs in Input</comment>
      <returntype>int</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>C</name>
        <type>char</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="CountMatches2">_countmatches2</name>
      <comment>Counts the number of matches of SearchFor in Input</comment>
      <returntype>int</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>SearchFor</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="CountMatches3">_countmatches3</name>
      <returntype>int</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>SearchFor</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>CaseSensitive</name>
        <type>boolean</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="CountWords">_countwords</name>
      <comment>Returns the number of words in Input</comment>
      <returntype>int</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="Decrypt">_decrypt</name>
      <comment>Decrypts the text using the default key.</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="Decrypt2">_decrypt2</name>
      <comment>Decrypts the text using the specified key.</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>PassKey</name>
        <type>int</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="DeleteSpaces">_deletespaces</name>
      <comment>Returns Input with all spaces deleted.</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="DeleteWhitespace">_deletewhitespace</name>
      <comment>Returns Input with all whitespace deleted. </comment>
      <returntype>String</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="Die">_die</name>
      <comment>Logs the message and exits the program.</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Message</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="Die2">_die2</name>
      <comment>Similar ot Die, but allows you to specify the ExitCode.</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Message</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>ExitCode</name>
        <type>int</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="Difference">_difference</name>
      <comment>Returns the text that differs in Input1 and Input2.
Index 0 is Input1 and, Index 1 is Input2</comment>
      <returntype>String[]</returntype>
      <parameter>
        <name>Input1</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Input2</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="Echo">_echo</name>
      <comment>Logs the Message Times times.</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Message</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Times</name>
        <type>int</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="Echo2">_echo2</name>
      <comment>Similar to Echo, but works with an array of Messages.</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Messages</name>
        <type>String[]</type>
      </parameter>
      <parameter>
        <name>Times</name>
        <type>int</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="Empty">_empty</name>
      <comment>Returns an empty string</comment>
      <returntype>String</returntype>
    </method>
    <method>
      <name DesignerName="Encrypt">_encrypt</name>
      <comment>Ecnrypts the text using the default key.</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="Encrypt2">_encrypt2</name>
      <comment>Encrypts the text using the specified key.</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>PassKey</name>
        <type>int</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="EndsWithAny">_endswithany</name>
      <comment>Returns true if Input ends with any one of Suffixes</comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Suffixes</name>
        <type>String[]</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="EndsWithAnyIgnoreCase">_endswithanyignorecase</name>
      <comment>Similar to EndsWithAny, but ignores the case.</comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Suffixes</name>
        <type>String[]</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="Equals">_equals</name>
      <comment>Returns true if the two inputs are the same, also checking case</comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>Str</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Str2</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="EqualsAny">_equalsany</name>
      <comment>Tests whether Input equals any of Comparator. </comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Comparator</name>
        <type>String[]</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="EqualsAny2">_equalsany2</name>
      <comment>Similar to EqualsAny, but you specify case sensitivity. </comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Comparator</name>
        <type>String[]</type>
      </parameter>
      <parameter>
        <name>IgnoreCase</name>
        <type>boolean</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="EqualsIgnoreCase">_equalsignorecase</name>
      <comment>Returns true if the two inputs are equal, ignoring their case</comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>Str</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Str2</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="Escape">_escape</name>
      <comment>Escapes Input for Linux. </comment>
      <returntype>String</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="ExpandTabs">_expandtabs</name>
      <comment>Expands the tabs to TabSize in Input.</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>TabSize</name>
        <type>int</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="FromBytes">_frombytes</name>
      <comment>Converts an array of bytes to string, using UTF8.</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Bytes</name>
        <type>byte[]</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="FromBytes2">_frombytes2</name>
      <comment>Converts an array of bytes to string, using Charset.</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Bytes</name>
        <type>byte[]</type>
      </parameter>
      <parameter>
        <name>Charset</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="FromChar">_fromchar</name>
      <comment>Converts Char to a String that contains the one character.</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Input</name>
        <type>char</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="FromCharArray">_fromchararray</name>
      <comment>Returns a String containing the given Char array</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Input</name>
        <type>char[]</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="FromInputStream">_frominputstream</name>
      <comment>Converts Input to a String.</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Input</name>
        <type>anywheresoftware.b4a.objects.streams.File.InputStreamWrapper</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="FromList">_fromlist</name>
      <comment>Returns a String from the given list</comment>
      <returntype>String</returntype>
      <parameter>
        <name>List</name>
        <type>anywheresoftware.b4a.objects.collections.List</type>
      </parameter>
      <parameter>
        <name>Sorted</name>
        <type>boolean</type>
      </parameter>
      <parameter>
        <name>Ascending</name>
        <type>boolean</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="FromList2">_fromlist2</name>
      <comment>Returns a String array from the given list</comment>
      <returntype>String[]</returntype>
      <parameter>
        <name>List</name>
        <type>anywheresoftware.b4a.objects.collections.List</type>
      </parameter>
      <parameter>
        <name>Sorted</name>
        <type>boolean</type>
      </parameter>
      <parameter>
        <name>Ascending</name>
        <type>boolean</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="FromList3">_fromlist3</name>
      <returntype>String</returntype>
      <parameter>
        <name>List</name>
        <type>anywheresoftware.b4a.objects.collections.List</type>
      </parameter>
      <parameter>
        <name>Sorted</name>
        <type>boolean</type>
      </parameter>
      <parameter>
        <name>Ascending</name>
        <type>boolean</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="FromList4">_fromlist4</name>
      <returntype>String[]</returntype>
      <parameter>
        <name>List</name>
        <type>anywheresoftware.b4a.objects.collections.List</type>
      </parameter>
      <parameter>
        <name>Sorted</name>
        <type>boolean</type>
      </parameter>
      <parameter>
        <name>Ascending</name>
        <type>boolean</type>
      </parameter>
      <parameter>
        <name>Separator</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="FromStringArray">_fromstringarray</name>
      <comment>Returns a String, from the given String array</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Input</name>
        <type>String[]</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="FromStringArray2">_fromstringarray2</name>
      <comment>Returns a String, from the given String array</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Input</name>
        <type>String[]</type>
      </parameter>
      <parameter>
        <name>Separator</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="FromStringBuilder">_fromstringbuilder</name>
      <returntype>String</returntype>
      <parameter>
        <name>StringBuilder</name>
        <type>anywheresoftware.b4a.keywords.StringBuilderWrapper</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="GetCommonPrefix">_getcommonprefix</name>
      <comment>Gets the prefix that is common to all of the strings. </comment>
      <returntype>String</returntype>
      <parameter>
        <name>Inputs</name>
        <type>String[]</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="GetCorrectForm">_getcorrectform</name>
      <comment>Returns the correct word for the given number.
Example:
&lt;code&gt;Dim ST as StringTools
Log(ST.GetCorrectForm(5,"Apple","Apples") 'Returns Apples.&lt;/code&gt;</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Number</name>
        <type>int</type>
      </parameter>
      <parameter>
        <name>NonPlural</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Plural</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="GetHexString">_gethexstring</name>
      <comment>This may or may not work.</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Input</name>
        <type>byte[]</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="GetJaroWinklerDistance">_getjarowinklerdistance</name>
      <returntype>double</returntype>
      <parameter>
        <name>Input1</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Input2</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="GetLongest">_getlongest</name>
      <comment>Returns the length of the longest word.</comment>
      <returntype>int</returntype>
      <parameter>
        <name>Input1</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Input2</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="GetLongestWord">_getlongestword</name>
      <comment>Returns the longest word.</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Input1</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Input2</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="GetShortest">_getshortest</name>
      <comment>Returns the length of the shortest word.</comment>
      <returntype>int</returntype>
      <parameter>
        <name>Input1</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Input2</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="GetShortestWord">_getshortestword</name>
      <comment>Returns the Shortest word. </comment>
      <returntype>String</returntype>
      <parameter>
        <name>Input1</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Input2</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="GetSoundexCode">_getsoundexcode</name>
      <returntype>String</returntype>
      <parameter>
        <name>C</name>
        <type>char</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="GetWordList">_getwordlist</name>
      <comment>Returns a list of the words in Input</comment>
      <returntype>anywheresoftware.b4a.objects.collections.List</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="HTMLEncode">_htmlencode</name>
      <comment>Encodes the given text for HTML. </comment>
      <returntype>String</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="Iif">_iif</name>
      <comment>Single line If statement. If Value is true returns Reponse1 else Response2. </comment>
      <returntype>String</returntype>
      <parameter>
        <name>TValue</name>
        <type>boolean</type>
      </parameter>
      <parameter>
        <name>Response1</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Response2</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="Implode">_implode</name>
      <returntype>String</returntype>
      <parameter>
        <name>StringArray</name>
        <type>String[]</type>
      </parameter>
      <parameter>
        <name>Glue</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="Implode2">_implode2</name>
      <returntype>String</returntype>
      <parameter>
        <name>List</name>
        <type>anywheresoftware.b4a.objects.collections.List</type>
      </parameter>
      <parameter>
        <name>Glue</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="IndexOf">_indexof</name>
      <comment>Gets the index of the first occurnce of LookFor, starting from 0</comment>
      <returntype>int</returntype>
      <parameter>
        <name>Str</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>LookFor</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="IndexOf2">_indexof2</name>
      <comment>Gets the index of the first occurnce of LookFor, starting from StartAt</comment>
      <returntype>int</returntype>
      <parameter>
        <name>Str</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>LookFor</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>StartAt</name>
        <type>int</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="IndexOfAny">_indexofany</name>
      <comment>Returns the index in Input where any one of SearchFor was found. Returns -1 if no match. 
&lt;code&gt;Dim ST as StringTools
Log(ST.IndexOfAny("Car",Array as String("Far","Bar","Car"))) ' Returns 0. &lt;/code&gt;</comment>
      <returntype>int</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>SearchFor</name>
        <type>String[]</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="IndexOfDifference">_indexofdifference</name>
      <comment>Returns the index at which Input1 and Input2 begin to differ, returns -1 if they don't differ. </comment>
      <returntype>int</returntype>
      <parameter>
        <name>Input1</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Input2</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="IndexOfDifference2">_indexofdifference2</name>
      <comment>Similar to IndexOfDifference, but takes an array of Strings. </comment>
      <returntype>int</returntype>
      <parameter>
        <name>Inputs</name>
        <type>String[]</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="Initials">_initials</name>
      <comment>Extracts the initals from Input</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="Initials2">_initials2</name>
      <comment>Extracts the initals from Input, converting the output to uppercase</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="Insert">_insert</name>
      <comment>Inserts ToInsert at Index in Input</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>ToInsert</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Index</name>
        <type>int</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="IsAllLowercase">_isalllowercase</name>
      <comment>Checks whether every character in input is lowercase</comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="IsAllUppercase">_isalluppercase</name>
      <comment>Checks whether every character in input is uppercase</comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="IsAlpha">_isalpha</name>
      <comment>Returns true if Input contains only alphabetical characters. </comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="IsAlphanumeric">_isalphanumeric</name>
      <comment>Returns true if Input contains only alphanumerical characters. </comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="IsAlphanumericSpace">_isalphanumericspace</name>
      <comment>Returns true if Input contains only alphanumerical and space characters. </comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="IsAlphaSpace">_isalphaspace</name>
      <comment>Returns true if Input contains only alphabeticl and space characters. </comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="IsAnagram">_isanagram</name>
      <comment>Tests whether Input1 is an anagram of Input2. </comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>Input1</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Input2</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="IsAnyBlank">_isanyblank</name>
      <comment>Similar to IsBlank, but operates on an array of strings.</comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>Inputs</name>
        <type>String[]</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="IsAnyEmpty">_isanyempty</name>
      <comment>Similar to IsEmpty, but operates on an array of strings.</comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>Inputs</name>
        <type>String[]</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="IsASCII">_isascii</name>
      <comment>Tests whther Input is composed of only ASCII characters.</comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="IsASCIIPrintable">_isasciiprintable</name>
      <comment>Tests whether Input contains only printable ASCII characters. </comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="IsBlank">_isblank</name>
      <comment>Returns true if Input is blank.</comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="IsChar">_ischar</name>
      <comment>Checks whether Input is a Alphabetic character, e.g. m</comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>Input</name>
        <type>char</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="IsCharacter">_ischaracter</name>
      <comment>Tests whether C as is a Character (A-Z).</comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>C</name>
        <type>char</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="IsEmpty">_isempty</name>
      <comment>Returns true if Str is empty, false otherwise</comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>Str</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="IsEmptyWithTrim">_isemptywithtrim</name>
      <returntype>boolean</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="IsInString">_isinstring</name>
      <comment>Tests whether SearchFor appears in Input.</comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>SearchFor</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="IsInString2">_isinstring2</name>
      <comment>Similar to IsInString, but allows for specifiying of case sensitivity.</comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>SearchFor</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>CaseSensitive</name>
        <type>boolean</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="IsLowercase">_islowercase</name>
      <comment>Checks whether the given chracter is lowercase</comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>Input</name>
        <type>char</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="IsMatch">_ismatch</name>
      <comment>Tests whether Input matches Regexp. The whole string has to be a match.</comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Regexp</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="IsMatch2">_ismatch2</name>
      <comment>Similar to IsMatch. Allows you to specifiy options, can be combined with Bit.Or.</comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Regexp</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Options</name>
        <type>int</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="IsMatchPartial">_ismatchpartial</name>
      <comment>Test whether Input matches Regexp, the whole string does not have to match.</comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Regexp</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="IsMatchPartial2">_ismatchpartial2</name>
      <comment>Similar to IsMatchPartial, but allows you to specify additional options that can be combined with Bit.Or.</comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Regexp</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Options</name>
        <type>int</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="IsNoneBlank">_isnoneblank</name>
      <comment>Similar to INotBlank, but operates on an array of strings.</comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>Inputs</name>
        <type>String[]</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="IsNoneEmpty">_isnoneempty</name>
      <comment>Similar to IsNotEmpty, but works on an array of strings. </comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>Inputs</name>
        <type>String[]</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="IsNotBlank">_isnotblank</name>
      <comment>Returns true if Input is not blank.</comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="IsNotEmpty">_isnotempty</name>
      <comment>Returns false is Str is empty, true otherwise</comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>Str</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="IsNull">_isnull</name>
      <comment>Checks whether Input is null</comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>Input</name>
        <type>Object</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="IsNumeric">_isnumeric</name>
      <comment>Returns true if Input contains only numerical characters. </comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="IsNumericSpace">_isnumericspace</name>
      <comment>Returns true if Input contains only numerical and space characters. </comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="IsOrderedWord">_isorderedword</name>
      <comment>Returns true if Word is an ordered word, a word in which the letters in it appear in alphabetical order.</comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>Word</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="IsPalindrome">_ispalindrome</name>
      <comment>Returns whether Input is a palindrome, meaning that it says the same forward as it does backwards, e.g. Anna</comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="IsPangram">_ispangram</name>
      <comment>Returns whether Input is a pangram (has all 26 letters of the alphabet). </comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="IsPartialAnagram">_ispartialanagram</name>
      <comment>Returrns true if you could take the letters in Input1  and make Input2. For example: Fee from Free. </comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>Input1</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Input2</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="IsQuoted">_isquoted</name>
      <comment>Tests whether Input is surrounded by '</comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="IsQuoted2">_isquoted2</name>
      <comment>Tests whether Input is surrounded by "</comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="IsReverseOrderedWord">_isreverseorderedword</name>
      <comment>Tests whether the letters in Word are in reverse alphabetical order. </comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>Word</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="IsUnique">_isunique</name>
      <comment>Tests whehter Input contains no double letters (e.g. 2 G's)</comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="IsUppercase">_isuppercase</name>
      <comment>Checks whether the given character is lowercase</comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>Input</name>
        <type>char</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="IsValidEmailAddress">_isvalidemailaddress</name>
      <comment>Checks whether EmailAddress is a valid email address. </comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>EmailAddress</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="IsValidURL">_isvalidurl</name>
      <comment>Checks whether Input is a valid URL, does not check if the URL exists.</comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="IsValidURL2">_isvalidurl2</name>
      <comment>Similar to IsValidURL, except is much stricter. Input has to have the scheme as well. </comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="IsWhiteSpace">_iswhitespace</name>
      <comment>Returns true if Input contains only space characters. </comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="Join">_join</name>
      <comment>Joins the given inputs into a string, separating inputs with Separator</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Separator</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Input</name>
        <type>String[]</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="Key">_key</name>
      <comment>Returns the key, in the given key value pair using = as the delimiter</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="Key2">_key2</name>
      <comment>Returns the key in the given key value pair using delimiter as the delimiter</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Delimeter</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="LastIndexOf">_lastindexof</name>
      <comment>Returns the index of the last position of LookFor</comment>
      <returntype>int</returntype>
      <parameter>
        <name>Str</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>LookFor</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="LastIndexOf2">_lastindexof2</name>
      <comment>Returns the index of the last position of LookFor, starting from StartAt</comment>
      <returntype>int</returntype>
      <parameter>
        <name>Str</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>LookFor</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>StartAt</name>
        <type>int</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="LastIndexOfAny">_lastindexofany</name>
      <comment>Similar to IndexOfAny, but starts looking from the right of the string.</comment>
      <returntype>int</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>SearchFor</name>
        <type>String[]</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="Left">_left</name>
      <comment>Retursn Length number of characters from Input</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Length</name>
        <type>int</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="Len">_len</name>
      <comment>Returns the length of Input.</comment>
      <returntype>int</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="LevenshteinDistance">_levenshteindistance</name>
      <comment>Returns the Levenshtein difference between s and t. </comment>
      <returntype>int</returntype>
      <parameter>
        <name>S</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>T</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="Log2">_log2</name>
      <comment>Similar to MsgBox. Logs a message with the specified title.</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Message</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Title</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="LongestCommonSubstring">_longestcommonsubstring</name>
      <comment>Returns the longest common substring of a and b. </comment>
      <returntype>String</returntype>
      <parameter>
        <name>A</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>b</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="LowercaseFirst">_lowercasefirst</name>
      <comment>Converts the first character of Input to lowercase</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="LowercaseLast">_lowercaselast</name>
      <comment>Converts the last character of Input to lowercase</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="LowercaseOnly">_lowercaseonly</name>
      <comment>Lowercases only the character at the given index</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Index</name>
        <type>int</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="LowercaseOnly2">_lowercaseonly2</name>
      <comment>Lowercases only the characters at the given indexes</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Index</name>
        <type>int[]</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="LowercaseSubString">_lowercasesubstring</name>
      <comment>Converts the given range to lowercase, starting at Index and stopping at the end of the string</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Index</name>
        <type>int</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="LowercaseSubString2">_lowercasesubstring2</name>
      <comment>Converts the given range to lowercase, starting at BeginIndex and stopping at EndIndex</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>BeginIndex</name>
        <type>int</type>
      </parameter>
      <parameter>
        <name>EndIndex</name>
        <type>int</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="LTrim">_ltrim</name>
      <comment>Removes leading whitespace from Str</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Str</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="Mid">_mid</name>
      <comment>Returns Input, starting at Start and ending at Length</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Start</name>
        <type>int</type>
      </parameter>
      <parameter>
        <name>Length</name>
        <type>int</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="Minimize">_minimize</name>
      <comment>Abbreviates a String using ellipses.</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>MaxWidth</name>
        <type>int</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="NewLines">_newlines</name>
      <comment>Returns HowMany number of CRLFs</comment>
      <returntype>String</returntype>
      <parameter>
        <name>HowMany</name>
        <type>int</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="NextLetter">_nextletter</name>
      <comment>Returns the next letter in the alphabet.</comment>
      <returntype>char</returntype>
      <parameter>
        <name>Letter</name>
        <type>char</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="Normalize">_normalize</name>
      <comment>Normalizes Input. </comment>
      <returntype>String</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="Overtype">_overtype</name>
      <comment>Overtypes the specified character at the given index with the NewChar.</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>NewChar</name>
        <type>char</type>
      </parameter>
      <parameter>
        <name>Index</name>
        <type>int</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="Overtype2">_overtype2</name>
      <comment>Overtypes the specified characters starting from Index and ending at the index that is equal to NewChars' length. </comment>
      <returntype>String</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>NewChars</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Index</name>
        <type>int</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="PadBoth">_padboth</name>
      <comment>Pads spaces at both ends of Input.</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Size</name>
        <type>int</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="PadBoth2">_padboth2</name>
      <comment>Similar to PadBoth, but you specify the PadChar. </comment>
      <returntype>String</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Size</name>
        <type>int</type>
      </parameter>
      <parameter>
        <name>PadChar</name>
        <type>char</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="PadLeft">_padleft</name>
      <comment>Pads spaces at the start of Input.</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Size</name>
        <type>int</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="PadLeft2">_padleft2</name>
      <comment>Similar to PadLeft, but you specify the PadChar. </comment>
      <returntype>String</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Size</name>
        <type>int</type>
      </parameter>
      <parameter>
        <name>PadChar</name>
        <type>char</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="PadRight">_padright</name>
      <comment>Pads spaces at the end of Input.</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Size</name>
        <type>int</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="PadRight2">_padright2</name>
      <comment>Similar to PadRight, but you specify the PadChar. </comment>
      <returntype>String</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Size</name>
        <type>int</type>
      </parameter>
      <parameter>
        <name>PadChar</name>
        <type>char</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="PrependIfMissing">_prependifmissing</name>
      <comment>Prepends Prefix to Input if Prefix isn't already there.</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Prefix</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="PrependIfMissing2">_prependifmissing2</name>
      <comment>Preprends Prefix is any one of Prefixes isn't there. </comment>
      <returntype>String</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Prefixes</name>
        <type>String[]</type>
      </parameter>
      <parameter>
        <name>Prefix</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="PrependIfMissingIgnoreCase">_prependifmissingignorecase</name>
      <comment>Similar to PrependIfMissing, but ignores case.</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Prefix</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="PrependIfMissingIgnoreCase2">_prependifmissingignorecase2</name>
      <comment>Similar to PrependIfMissing2, but ignores case.</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Prefixes</name>
        <type>String[]</type>
      </parameter>
      <parameter>
        <name>Prefix</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="PreviousLetter">_previousletter</name>
      <comment>Returns the previous letter in the alphabet.</comment>
      <returntype>char</returntype>
      <parameter>
        <name>Letter</name>
        <type>char</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="Quibble">_quibble</name>
      <comment>Returns the words with the correct English grammar, for example "Car and Bar" or "Car, Bar and Far".</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Words</name>
        <type>String[]</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="Quibble2">_quibble2</name>
      <comment>Same as Quibble without { and }.</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Words</name>
        <type>String[]</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="Quotes">_quotes</name>
      <comment>Returns input surrounded with '</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="Quotes2">_quotes2</name>
      <comment>Returns input surrounded with '</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>CheckIfAlreadyExists</name>
        <type>boolean</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="Quotes3">_quotes3</name>
      <comment>Returns input surrounded with "</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="Quotes4">_quotes4</name>
      <comment>Returns input surrounded with "</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>CheckIfAlreadyExists</name>
        <type>boolean</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="Random">_random</name>
      <comment>Returns a string of Count random ASCII letters. </comment>
      <returntype>String</returntype>
      <parameter>
        <name>Count</name>
        <type>int</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="Random2">_random2</name>
      <comment>Returns a string of random characters, using the characters in Chars. </comment>
      <returntype>String</returntype>
      <parameter>
        <name>Count</name>
        <type>int</type>
      </parameter>
      <parameter>
        <name>Chars</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="Random3">_random3</name>
      <comment>Similar to Random2, but takes a Char array instead of a String.</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Count</name>
        <type>int</type>
      </parameter>
      <parameter>
        <name>Chars</name>
        <type>char[]</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="Random4">_random4</name>
      <comment>Returns Count number of random characters, starting from Code Point LowLimit (inlcusive) and ending at HighPoint (exclusive)</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Count</name>
        <type>int</type>
      </parameter>
      <parameter>
        <name>LowLimit</name>
        <type>int</type>
      </parameter>
      <parameter>
        <name>HighLimit</name>
        <type>int</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="RandomItem">_randomitem</name>
      <comment>Same as PickRandomElement2 in ListTools.</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Inputs</name>
        <type>String[]</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="RandomLetters">_randomletters</name>
      <comment>Returns Length number of random lowercase and uppercase letters</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Length</name>
        <type>int</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="RandomLowercaseLetters">_randomlowercaseletters</name>
      <comment>Returns Count number of random lowercase only letters</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Count</name>
        <type>int</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="RandomNumeric">_randomnumeric</name>
      <comment>Returns a random numeric string.</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Count</name>
        <type>int</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="RandomUppercaseLetters">_randomuppercaseletters</name>
      <comment>Returns Count number of random uppercase only letters</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Count</name>
        <type>int</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="ReadableFileSize">_readablefilesize</name>
      <comment>Converts Size to a human readable string. Supports B to GB</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Size</name>
        <type>long</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="Remove">_remove</name>
      <comment>Removes all occurences of ToRemove from Input</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>ToRemove</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="RemoveBlanks">_removeblanks</name>
      <comment>Removes blanks from Input</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="RemoveBoth">_removeboth</name>
      <comment>Removes the first and last character from Input.</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="RemoveEnd">_removeend</name>
      <comment>Removes Suffix from the end of Input, only if it is at the end.</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Suffix</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="RemoveFirst">_removefirst</name>
      <comment>Removes the first character from Input.</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="RemoveLast">_removelast</name>
      <comment>Removes the last character from Input.</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="RemoveRegex">_removeregex</name>
      <comment>Removes the specified regex pattern from Input.</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Pattern</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="RemoveSpaces">_removespaces</name>
      <comment>Removes all spaces (not whitespace) from Input</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="RemoveSpecialChars">_removespecialchars</name>
      <comment>Removes special characters and numbers from Input.  </comment>
      <returntype>String</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="RemoveStart">_removestart</name>
      <comment>Removes PRefix from the start of Input, only if it is at the start.</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Prefix</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="RemoveTabs">_removetabs</name>
      <comment>Removes all tabs from Input.</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="RemoveWhitespace">_removewhitespace</name>
      <comment>Removes all whitespace from Input</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="Repeat">_repeat</name>
      <comment>Returns a String of Str Times times</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Str</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Times</name>
        <type>int</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="Reverse">_reverse</name>
      <comment>Reverses the given string</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="ReverseDelimited">_reversedelimited</name>
      <comment>Reverses a delimited input. </comment>
      <returntype>String</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Delimiter</name>
        <type>char</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="RockPaperScissors">_rockpaperscissors</name>
      <comment>Returns Rock, Paper or Scissors.</comment>
      <returntype>String</returntype>
    </method>
    <method>
      <name DesignerName="Rot13">_rot13</name>
      <comment>Returns a Rot 13 encrypted version of Input</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="Shuffle">_shuffle</name>
      <returntype>String</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="Sort">_sort</name>
      <returntype>String</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Ascending</name>
        <type>boolean</type>
      </parameter>
      <parameter>
        <name>CaseSensitive</name>
        <type>boolean</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="Split">_split</name>
      <comment>Splits Input around matches of Pattern.</comment>
      <returntype>String[]</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Pattern</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="Split2">_split2</name>
      <comment>Splits Input around matches of Pattern, limited to the first Limit matches. Returns all matches if Limit is more than the number of matches.</comment>
      <returntype>String[]</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Pattern</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Limit</name>
        <type>int</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="Split3">_split3</name>
      <comment>Splits Input using whitepsace as the separator.</comment>
      <returntype>String[]</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="SplitGetWord">_splitgetword</name>
      <comment>Returns the word at Index using the specified pattern and input. Throws an exception if Index is out of bounds. </comment>
      <returntype>String</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Pattern</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Index</name>
        <type>int</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="StartsWith">_startswith</name>
      <comment>Returns true if Str starts with Starter</comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>Str</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Starter</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="StartsWithAny">_startswithany</name>
      <comment>Returns trye if Input starts with any one of Prefixes</comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Prefixes</name>
        <type>String[]</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="StartsWithAnyIgnoreCase">_startswithanyignorecase</name>
      <comment>Similar to StartsWithAny but ignores the case.</comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Prefixes</name>
        <type>String[]</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="StringOf">_stringof</name>
      <comment>Returns Length number of C</comment>
      <returntype>String</returntype>
      <parameter>
        <name>C</name>
        <type>char</type>
      </parameter>
      <parameter>
        <name>Length</name>
        <type>int</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="StringOf2">_stringof2</name>
      <comment>Like StringOf, but takes a String for the first input</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Length</name>
        <type>int</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="StringOfChar">_stringofchar</name>
      <comment>Returns a String composed of C, Times times. </comment>
      <returntype>String</returntype>
      <parameter>
        <name>C</name>
        <type>char</type>
      </parameter>
      <parameter>
        <name>Times</name>
        <type>int</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="StringToMorse">_stringtomorse</name>
      <comment>Converts a string to morse code. </comment>
      <returntype>String</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="StringToNATO">_stringtonato</name>
      <comment>Converts a string to the NATO phonetic aphabet.</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="StringToStringBuilder">_stringtostringbuilder</name>
      <comment>Converts Input to a StringBuilder.</comment>
      <returntype>anywheresoftware.b4a.keywords.StringBuilderWrapper</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="StringToWesternUnion">_stringtowesternunion</name>
      <comment>Converts a string to the Western Union phonetic alphabet.</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="Strip">_strip</name>
      <comment>Returns Input, with leading trailing whitespace stripped.</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="Strip2">_strip2</name>
      <comment>Removes all whitespace from Input.</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="StripAll">_stripall</name>
      <comment>Same as Strip, but takes an array of strings.</comment>
      <returntype>String[]</returntype>
      <parameter>
        <name>Inputs</name>
        <type>String[]</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="StripChars">_stripchars</name>
      <comment>Strips the specified characters from Input. For example aei will remove the letters a, e and i from Input.</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>ToStrip</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="StripTo">_stripto</name>
      <comment>Returns Input, with everything after the first match stripped. </comment>
      <returntype>String</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>SearchFor</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="SubString">_substring</name>
      <comment>Returns Str starting from StartAt</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Str</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>StartAt</name>
        <type>int</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="SubString2">_substring2</name>
      <comment>Returns Str starting from StartAt and stopping at StopAt</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Str</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>StartAt</name>
        <type>int</type>
      </parameter>
      <parameter>
        <name>StopAt</name>
        <type>int</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="SubStringAt">_substringat</name>
      <comment>Returns substring of Input starting at the first index of separator.</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Separator</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="SubStringAtLast">_substringatlast</name>
      <comment>Returns substring of Input starting at the last index of separator.</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Separator</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="SubStringBetween">_substringbetween</name>
      <comment>Gets the String that is nested in between two instances of the same String.</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Tag</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="SubStringBetween2">_substringbetween2</name>
      <comment>Gets the String that is nested in between two Strings.</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Open</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Close</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="Surround">_surround</name>
      <comment>Surrounds Input with SurrounWith</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>SurroundWith</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="Surround2">_surround2</name>
      <comment>Surrounds Input with SurroundWith, optionally checking if it doesn't need to be done </comment>
      <returntype>String</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>SurroundWith</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>CheckIfAlreadyExists</name>
        <type>boolean</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="SwapCase">_swapcase</name>
      <comment>Swaps the case of the characters in the given string</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="TitleCase">_titlecase</name>
      <comment>Converts Input to Title Case (Proper Case), using whitespace as the delimiter. Leaves he rest of the word unchanged.
Example my name iS mathew becomes My Name IS Mathew. </comment>
      <returntype>String</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="TitleCase2">_titlecase2</name>
      <comment>Similar to TitleCase, but allowing you to specify the delimiters. </comment>
      <returntype>String</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Delimiters</name>
        <type>String[]</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="TitleCaseFully">_titlecasefully</name>
      <comment>Similar to TilteCase, but the whole word is changed. 
Example: my name iS mathew becomes My Name Is Mathew. </comment>
      <returntype>String</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="TitleCaseFully2">_titlecasefully2</name>
      <comment>Similar to TilteCaseFully, but allows you to specify the delimiter. </comment>
      <returntype>String</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Delimiters</name>
        <type>String[]</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="ToBytes">_tobytes</name>
      <comment>Converts Input to bytes using UTF8.</comment>
      <returntype>byte[]</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="ToBytes2">_tobytes2</name>
      <comment>Converts Input to bytes using Charset as the charset</comment>
      <returntype>byte[]</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Charset</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="ToChar">_tochar</name>
      <comment>Returns Input as a Char. Only the first letter is converted if there are more than one. </comment>
      <returntype>char</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="ToCharArray">_tochararray</name>
      <comment>Returns a char array from the given String</comment>
      <returntype>char[]</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="ToInputStream">_toinputstream</name>
      <comment>Converts Input to an InputStream.</comment>
      <returntype>anywheresoftware.b4a.objects.streams.File.InputStreamWrapper</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="TokenList">_tokenlist</name>
      <comment>Splits Input at matches of Delimiter. If IgnoreFirst is true the first match will not be included. If IgnoreLast is true then the last match will not be included.</comment>
      <returntype>anywheresoftware.b4a.objects.collections.List</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Delimiter</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>IgnoreFirst</name>
        <type>boolean</type>
      </parameter>
      <parameter>
        <name>IgnoreLast</name>
        <type>boolean</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="ToList">_tolist</name>
      <comment>Converts the given string to a list, where each item is a character from Input. </comment>
      <returntype>anywheresoftware.b4a.objects.collections.List</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="ToList2">_tolist2</name>
      <comment>Returns the String as a List, splitting at SplitAt</comment>
      <returntype>anywheresoftware.b4a.objects.collections.List</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>SplitAt</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="ToList3">_tolist3</name>
      <returntype>anywheresoftware.b4a.objects.collections.List</returntype>
      <parameter>
        <name>Inputs</name>
        <type>String[]</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="ToStringArray">_tostringarray</name>
      <comment>Returns a String array, where each item in the array is a letter from Input.</comment>
      <returntype>String[]</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="ToStringBuilder">_tostringbuilder</name>
      <returntype>anywheresoftware.b4a.keywords.StringBuilderWrapper</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="ToStringBuilder2">_tostringbuilder2</name>
      <comment>Converts Input to an existing StringBuilder. </comment>
      <returntype>anywheresoftware.b4a.keywords.StringBuilderWrapper</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>StringBuilder</name>
        <type>anywheresoftware.b4a.keywords.StringBuilderWrapper</type>
      </parameter>
      <parameter>
        <name>AtStart</name>
        <type>boolean</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="Trim">_trim</name>
      <comment>Removes leading and trailing whitespace from Input.</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="TrimLeft">_trimleft</name>
      <comment>Removes leading whitespace from Input. </comment>
      <returntype>String</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="TrimPrefix">_trimprefix</name>
      <comment>Removes the leading Prefix from Input, if it is there, otherwise leaves Input alone.</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Prefix</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="TrimRight">_trimright</name>
      <comment>Removes trailing whitespace from Input.</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="TrimSuffix">_trimsuffix</name>
      <comment>Removes the trailing Suffix from Input, if it is there, otherwise leaves Input alone.</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Suffix</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="Truncate">_truncate</name>
      <comment>Truncates the String by returning the first Length characters. </comment>
      <returntype>String</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Length</name>
        <type>int</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="UppercaseFirst">_uppercasefirst</name>
      <comment>Converts the first character of Input to uppercase</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="UppercaseLast">_uppercaselast</name>
      <comment>Converts the last character of Input to uppercase</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="UppercaseOnly">_uppercaseonly</name>
      <comment>Uppercases only the character at the given index</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Index</name>
        <type>int</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="UppercaseOnly2">_uppercaseonly2</name>
      <comment>Uppercases only the character at the given indexes</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Index</name>
        <type>int[]</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="UppercaseSubString">_uppercasesubstring</name>
      <comment>Converts the given range to uppercase, starting at Index and stopping at the end of the string</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Index</name>
        <type>int</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="UppercaseSubString2">_uppercasesubstring2</name>
      <comment>Converts the given range to uppercase, starting at BeginIndex and stopping at EndIndex</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>BeginIndex</name>
        <type>int</type>
      </parameter>
      <parameter>
        <name>EndIndex</name>
        <type>int</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="Val">_val</name>
      <comment>Returns the numerical value of Input. </comment>
      <returntype>double</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="Value">_value</name>
      <comment>Returns the value, in the given key value pair using = as the delimiter</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="Value2">_value2</name>
      <comment>Returns the value, in the given key value pair using delimiter as the delimiter</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Delimeter</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="WordCount">_wordcount</name>
      <comment>Same as CountWords. </comment>
      <returntype>int</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="WordNo">_wordno</name>
      <comment>Returns the number-th word. The index is zero based. Thorws an exception if there is no word at that index.</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Number</name>
        <type>int</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="Wrap">_wrap</name>
      <comment>Wraps Input every MaxLength characters, using CRLF as the wrap character. </comment>
      <returntype>String</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>MaxLength</name>
        <type>int</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="Wrap2">_wrap2</name>
      <comment>Similar to Wrap, but the wrap character is specified.</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>MaxLength</name>
        <type>int</type>
      </parameter>
      <parameter>
        <name>NewLineChar</name>
        <type>char</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="WTF">_wtf</name>
      <comment>Logs a What a Terrible failure error. </comment>
      <returntype>String</returntype>
      <parameter>
        <name>Message</name>
        <type>String</type>
      </parameter>
    </method>
  </class>
  <class>
    <name>com.mathew.jmmtools.datetools</name>
    <shortname>DateTools</shortname>
    <method>
      <name>IsInitialized</name>
      <comment>Tests whether the object has been initialized.</comment>
      <returntype>boolean</returntype>
    </method>
    <method>
      <name DesignerName="AddDays">_adddays</name>
      <comment>Adds the specified number of days to Date. </comment>
      <returntype>long</returntype>
      <parameter>
        <name>Date</name>
        <type>long</type>
      </parameter>
      <parameter>
        <name>Amount</name>
        <type>int</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="AddMonths">_addmonths</name>
      <comment>Adds the specified number of months to Date. </comment>
      <returntype>long</returntype>
      <parameter>
        <name>Date</name>
        <type>long</type>
      </parameter>
      <parameter>
        <name>Amount</name>
        <type>int</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="AddYears">_addyears</name>
      <comment>Adds the specified number of years to Date. </comment>
      <returntype>long</returntype>
      <parameter>
        <name>Date</name>
        <type>long</type>
      </parameter>
      <parameter>
        <name>Amount</name>
        <type>int</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="CurrentDayOfMonth">_currentdayofmonth</name>
      <comment>Returs the current day of the month. Can be 1 to 31</comment>
      <returntype>int</returntype>
    </method>
    <method>
      <name DesignerName="CurrentDayOfWeek">_currentdayofweek</name>
      <comment>Returns the current day of the week. Can be 1 to 7. 1 is Sunday</comment>
      <returntype>int</returntype>
    </method>
    <method>
      <name DesignerName="CurrentDayOfYear">_currentdayofyear</name>
      <comment>Returns the current day of the year. Can be 1 to 366</comment>
      <returntype>int</returntype>
    </method>
    <method>
      <name DesignerName="CurrentHour">_currenthour</name>
      <comment>Returns the current hour, can be 0 to 23</comment>
      <returntype>int</returntype>
    </method>
    <method>
      <name DesignerName="CurrentMinute">_currentminute</name>
      <comment>Returns the current minute. Can be 0 to 59</comment>
      <returntype>int</returntype>
    </method>
    <method>
      <name DesignerName="CurrentMonth">_currentmonth</name>
      <comment>Returns the current month of the year. Can be 1 to 12</comment>
      <returntype>int</returntype>
    </method>
    <method>
      <name DesignerName="CurrentSecond">_currentsecond</name>
      <comment>Returns the current second. Can be 0 to 59</comment>
      <returntype>int</returntype>
    </method>
    <method>
      <name DesignerName="CurrentYear">_currentyear</name>
      <comment>Returns the current year</comment>
      <returntype>int</returntype>
    </method>
    <method>
      <name DesignerName="DayOfWeek">_dayofweek</name>
      <comment>Gets the name of the day of the week</comment>
      <returntype>String</returntype>
    </method>
    <method>
      <name DesignerName="DayOfWeek2">_dayofweek2</name>
      <comment>Gets the name of the day of the week</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Day</name>
        <type>int</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="DaysBetween">_daysbetween</name>
      <comment>Returns the number of days Between Date1 as Date2</comment>
      <returntype>int</returntype>
      <parameter>
        <name>Date1</name>
        <type>long</type>
      </parameter>
      <parameter>
        <name>Date2</name>
        <type>long</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="DaysInMonth">_daysinmonth</name>
      <comment>Returns the number of days in the given month</comment>
      <returntype>int</returntype>
      <parameter>
        <name>Month</name>
        <type>int</type>
      </parameter>
      <parameter>
        <name>Year</name>
        <type>int</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="DaysInYear">_daysinyear</name>
      <comment>Returns the number of days in the current year</comment>
      <returntype>int</returntype>
    </method>
    <method>
      <name DesignerName="DaysInYear2">_daysinyear2</name>
      <comment>Returns the number of days in the given year.</comment>
      <returntype>int</returntype>
      <parameter>
        <name>Year</name>
        <type>int</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="DaysToDate">_daystodate</name>
      <comment>Returns the date that is in Days days. Days can be negative or positive. The time will be equal to the current time. </comment>
      <returntype>long</returntype>
      <parameter>
        <name>Days</name>
        <type>int</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="Easter">_easter</name>
      <comment>Returns Easter sunday for the current year. </comment>
      <returntype>long</returntype>
    </method>
    <method>
      <name DesignerName="Easter2">_easter2</name>
      <comment>Returns Easter sunday for the given year.</comment>
      <returntype>long</returntype>
      <parameter>
        <name>Year</name>
        <type>int</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="Epoch">_epoch</name>
      <comment>Returns the date and time of the epoch</comment>
      <returntype>long</returntype>
    </method>
    <method>
      <name DesignerName="FirstDayOfYear">_firstdayofyear</name>
      <comment>Returns the first day of the Year.</comment>
      <returntype>long</returntype>
      <parameter>
        <name>Year</name>
        <type>int</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="FormatDate">_formatdate</name>
      <comment>Formats the date using the given format. </comment>
      <returntype>String</returntype>
      <parameter>
        <name>Date</name>
        <type>long</type>
      </parameter>
      <parameter>
        <name>Format</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="FormatDateTime">_formatdatetime</name>
      <comment>Formats the datetime using the given format. </comment>
      <returntype>String</returntype>
      <parameter>
        <name>TimeDate</name>
        <type>long</type>
      </parameter>
      <parameter>
        <name>Format</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="FormatTime">_formattime</name>
      <comment>Formats the time using the given format. </comment>
      <returntype>String</returntype>
      <parameter>
        <name>Time</name>
        <type>long</type>
      </parameter>
      <parameter>
        <name>Format</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="GetDayOfWeekName">_getdayofweekname</name>
      <comment>Returns the name of the day of the week of the ticks value. </comment>
      <returntype>String</returntype>
      <parameter>
        <name>Ticks</name>
        <type>long</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="GetEra">_getera</name>
      <comment>Gets the era of Ticks.</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Ticks</name>
        <type>long</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="GetMonthName">_getmonthname</name>
      <comment>Gets the name of the month represented by Ticks.</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Ticks</name>
        <type>long</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="HoursInYear">_hoursinyear</name>
      <comment>Returns the number of hours in the current year.</comment>
      <returntype>double</returntype>
    </method>
    <method>
      <name DesignerName="HoursInYear2">_hoursinyear2</name>
      <comment>Returns the number of hours in the given year.</comment>
      <returntype>double</returntype>
      <parameter>
        <name>Year</name>
        <type>int</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="IsAfter">_isafter</name>
      <comment>Returns true if Date1 as after Date2</comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>Date1</name>
        <type>long</type>
      </parameter>
      <parameter>
        <name>Date2</name>
        <type>long</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="IsBefore">_isbefore</name>
      <comment>Returns true if Date1 is before Date2</comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>Date1</name>
        <type>long</type>
      </parameter>
      <parameter>
        <name>Date2</name>
        <type>long</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="IsEaster">_iseaster</name>
      <comment>Tests whether Date is easter. </comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>Date</name>
        <type>long</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="IsEaster2">_iseaster2</name>
      <comment>Tests whether date is easter. </comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>Date</name>
        <type>long</type>
      </parameter>
      <parameter>
        <name>Year</name>
        <type>int</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="IsHourInInterval">_ishourininterval</name>
      <comment>Return true if Target is between Start and End1. </comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>Target</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Start</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>End1</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="IsLeapYear">_isleapyear</name>
      <comment>Returns true if this year is a leap year</comment>
      <returntype>boolean</returntype>
    </method>
    <method>
      <name DesignerName="IsLeapYear2">_isleapyear2</name>
      <comment>Returns true if Year is a leap year</comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>Year</name>
        <type>int</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="IsNow">_isnow</name>
      <comment>Returns true if Date is equal to the current date and time</comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>Date</name>
        <type>long</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="IsSameDate">_issamedate</name>
      <comment>Returns true if Date1 and Date2 represent the same date</comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>Date1</name>
        <type>long</type>
      </parameter>
      <parameter>
        <name>Date2</name>
        <type>long</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="IsSameTime">_issametime</name>
      <comment>Returns true if Date1 and Date2 represent the same time</comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>Date1</name>
        <type>long</type>
      </parameter>
      <parameter>
        <name>Date2</name>
        <type>long</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="LastDayOfYear">_lastdayofyear</name>
      <comment>Returns the last day of the Year.</comment>
      <returntype>long</returntype>
      <parameter>
        <name>Year</name>
        <type>int</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="LeapYear">_leapyear</name>
      <comment>Returns the date of the leap day in the leap year. </comment>
      <returntype>long</returntype>
      <parameter>
        <name>Year</name>
        <type>int</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="MonthName">_monthname</name>
      <comment>Returns the English name of the given month, ZeroBased in you want the first month to be 0. </comment>
      <returntype>String</returntype>
      <parameter>
        <name>Month</name>
        <type>int</type>
      </parameter>
      <parameter>
        <name>ZeroBased</name>
        <type>boolean</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="NextLeapYear">_nextleapyear</name>
      <comment>Returns the next leap year, counting up from FromYear.</comment>
      <returntype>int</returntype>
      <parameter>
        <name>FromYear</name>
        <type>int</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="ParseDate">_parsedate</name>
      <comment>Parses the given date, using the specified format.</comment>
      <returntype>long</returntype>
      <parameter>
        <name>Date</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Format</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="ParseDateTime">_parsedatetime</name>
      <comment>Parses the given datetime, using the specified format.</comment>
      <returntype>long</returntype>
      <parameter>
        <name>Date</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Time</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Format</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="ParseTime">_parsetime</name>
      <comment>Parses the given time, using the specified format.</comment>
      <returntype>long</returntype>
      <parameter>
        <name>Time</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Format</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="ParseTimeToMinutes">_parsetimetominutes</name>
      <comment>Turns a period of time into the number of minutes represented. Returns -1 on failure.</comment>
      <returntype>double</returntype>
      <parameter>
        <name>HourFormat</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="PreviousLeapYear">_previousleapyear</name>
      <comment>Returns the previous leap year, counting down from FromYear.</comment>
      <returntype>int</returntype>
      <parameter>
        <name>FromYear</name>
        <type>int</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="SearchDate">_searchdate</name>
      <comment>Returns true if Date1 and date2 are within DateRange days of each other. </comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>Date1</name>
        <type>long</type>
      </parameter>
      <parameter>
        <name>Date2</name>
        <type>long</type>
      </parameter>
      <parameter>
        <name>DateRange</name>
        <type>int</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="Tomorrow">_tomorrow</name>
      <comment>Returns tomorrow's date, with the time set to the current time</comment>
      <returntype>long</returntype>
    </method>
    <method>
      <name DesignerName="ToString">_tostring</name>
      <comment>Returns the date &amp; time value of the ticks value</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Ticks</name>
        <type>long</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="YearsBetween">_yearsbetween</name>
      <comment>Returns the number of years between Year1 and Year2. 
NOTE: This does not take into account dates. </comment>
      <returntype>int</returntype>
      <parameter>
        <name>Year1</name>
        <type>int</type>
      </parameter>
      <parameter>
        <name>Year2</name>
        <type>int</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="Yesterday">_yesterday</name>
      <comment>Returns yesterday's date, with the time set to the current time</comment>
      <returntype>long</returntype>
    </method>
  </class>
  <class>
    <name>com.mathew.jmmtools.filetools</name>
    <shortname>FileTools</shortname>
    <method>
      <name>IsInitialized</name>
      <comment>Tests whether the object has been initialized.</comment>
      <returntype>boolean</returntype>
    </method>
    <method>
      <name DesignerName="BytesToImage">_bytestoimage</name>
      <comment>Returns the given bytes array as an image, or thors an exception if no image is stored.</comment>
      <returntype>anywheresoftware.b4j.objects.ImageViewWrapper.ImageWrapper</returntype>
      <parameter>
        <name>Data</name>
        <type>byte[]</type>
      </parameter>
      <parameter>
        <name>StartOffset</name>
        <type>int</type>
      </parameter>
      <parameter>
        <name>MaxCount</name>
        <type>int</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="ChangeExt">_changeext</name>
      <comment>Returns FileName with the extension replaced by NewExt</comment>
      <returntype>String</returntype>
      <parameter>
        <name>FileName</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>NewExt</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="Copy">_copy</name>
      <comment>Copies FileName to OtherFileName. Works in the same way as Rename, but does not delete the original (obviously). </comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>Dir</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>FileName</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>OtherDir</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>OtherFileName</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="CountFiles">_countfiles</name>
      <comment>Returns the number of files and directories in Dir. </comment>
      <returntype>int</returntype>
      <parameter>
        <name>Dir</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="CreateNewFile">_createnewfile</name>
      <comment>Creates a new file, if and only if the file does not already exist. Returns true if the file was created, false otherwise</comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>Dir</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>FileName</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="DirectoryContains">_directorycontains</name>
      <comment>Returns true if Dir has a file or folder called Child. </comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>Dir</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Child</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="FileBaseName">_filebasename</name>
      <comment>Returns the file base name</comment>
      <returntype>String</returntype>
      <parameter>
        <name>FileName</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="FileExtension">_fileextension</name>
      <comment>Returns the file extension</comment>
      <returntype>String</returntype>
      <parameter>
        <name>FileName</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="FormattedFileSize">_formattedfilesize</name>
      <comment>Returns the size of the file, formatted in a human readable string</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Dir</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>FileName</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="GetFileName">_getfilename</name>
      <comment>Returns the filename</comment>
      <returntype>String</returntype>
      <parameter>
        <name>FileName</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="IsDirectoryEmpty">_isdirectoryempty</name>
      <comment>Tests whether Dir has no files or directories in it. Returns false if the directory could be ne accessed. </comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>Dir</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="IsExtension">_isextension</name>
      <comment>Returns true if Extension is the extension of the file</comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>FileName</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Extension</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="IsExtension2">_isextension2</name>
      <comment>Returns true if any of the given extensions is the extension of the file</comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>FileName</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Extension</name>
        <type>String[]</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="IsFile">_isfile</name>
      <comment>Tests whether the specified file is a file.  </comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>Dir</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>FileName</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="IsFileNewer">_isfilenewer</name>
      <comment>Returns true if File is newer than Date</comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>Dir</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>FileName</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Date</name>
        <type>long</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="IsFileNewer2">_isfilenewer2</name>
      <comment>Returns true if file1 is newer than file2</comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>Dir1</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>FileName1</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Dir2</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>FileName2</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="IsFileOlder">_isfileolder</name>
      <comment>Returns true if File is older than date</comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>Dir</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>FileName</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Date</name>
        <type>long</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="IsFileOlder2">_isfileolder2</name>
      <comment>Returns true if file1 is older than file2</comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>Dir1</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>FileName1</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Dir2</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>FileName2</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="IsHidden">_ishidden</name>
      <comment>Returns true if the file is hidden. 
This does not check if the file is hidden on Windows. </comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>Dir</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>FileName</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="IsReadable">_isreadable</name>
      <comment>Returns true if the specified file can be read.</comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>Dir</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>FileName</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="IsSameDir">_issamedir</name>
      <comment>Returns true if Dir1 is the same direcotry as Dir2.</comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>Dir1</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Dir2</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="IsSameFile">_issamefile</name>
      <comment>Returns true if the contents of the files are equal. 
NOTE: Can be slow at times, especially on large files!.</comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>Dir1</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>FileName1</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Dir2</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>FileName2</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="IsTextFile">_istextfile</name>
      <comment>Returns True if the given file can be read as a text file</comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>Dir</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>FileName</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="LineCount">_linecount</name>
      <comment>Returns the number of lines in the given file. </comment>
      <returntype>int</returntype>
      <parameter>
        <name>Dir</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>FileName</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="ListDirs">_listdirs</name>
      <comment>Lists only directories in the given directory</comment>
      <returntype>anywheresoftware.b4a.objects.collections.List</returntype>
      <parameter>
        <name>Dir</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="ListFiles">_listfiles</name>
      <comment>Lists only files in the given directory</comment>
      <returntype>anywheresoftware.b4a.objects.collections.List</returntype>
      <parameter>
        <name>Dir</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="Move">_move</name>
      <comment>Moves FileName to NewFileName. Works in the same way as Rename. </comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>Dir</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>FileName</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>NewDir</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>NewFileName</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="NoDirs">_nodirs</name>
      <comment>Returns the number of directories in Dir. </comment>
      <returntype>int</returntype>
      <parameter>
        <name>Dir</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="NoFiles">_nofiles</name>
      <comment>Returns the number of files in Dir. </comment>
      <returntype>int</returntype>
      <parameter>
        <name>Dir</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="ReadAllBytes">_readallbytes</name>
      <comment>Reads all bytes in the given file. Using UTF8 for the encoding</comment>
      <returntype>byte[]</returntype>
      <parameter>
        <name>Dir</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>FileName</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="ReadAllBytes2">_readallbytes2</name>
      <comment>Reads all bytes in the given file using Encoding for the encoding</comment>
      <returntype>byte[]</returntype>
      <parameter>
        <name>Dir</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>FileName</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Encoding</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="ReadCharArray">_readchararray</name>
      <comment>Reads the given file to a char array</comment>
      <returntype>char[]</returntype>
      <parameter>
        <name>Dir</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>FileName</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="ReadFirstLine">_readfirstline</name>
      <comment>Reads and returns the first line in a file.</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Dir</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>FileName</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="ReadLine">_readline</name>
      <comment>Reads line Line from FileName.</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Dir</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>FileName</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Line</name>
        <type>int</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="ReadLines">_readlines</name>
      <comment>Reads count lines from FileName, starting at Line.</comment>
      <returntype>anywheresoftware.b4a.objects.collections.List</returntype>
      <parameter>
        <name>Dir</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>FileName</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Line</name>
        <type>int</type>
      </parameter>
      <parameter>
        <name>Count</name>
        <type>int</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="ReadStringArray">_readstringarray</name>
      <comment>Reads the given file to a String array</comment>
      <returntype>String[]</returntype>
      <parameter>
        <name>Dir</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>FileName</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="RemoveIllegalChars">_removeillegalchars</name>
      <comment>Removes illegal characters from a filename so that it can be saved. </comment>
      <returntype>String</returntype>
      <parameter>
        <name>FileName</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="RemoveLines">_removelines</name>
      <comment>Removes lines from FileName, starting at Line and removing Count (exclusive) lines.</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Dir</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>FileName</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Line</name>
        <type>int</type>
      </parameter>
      <parameter>
        <name>Count</name>
        <type>int</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="Rename">_rename</name>
      <comment>Renames FileName to NewFileName.
This Is done by reading the contents of FileName and writing it To  NewName and Then deleting the original.</comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>Dir</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>FileName</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>NewName</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="SaveImage">_saveimage</name>
      <comment>Saves the given image as a PNG to the given directory and filename. Overwrites the file if it already exists</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Image</name>
        <type>anywheresoftware.b4j.objects.ImageViewWrapper.ImageWrapper</type>
      </parameter>
      <parameter>
        <name>Dir</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>FileName</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="SeparatorsToSystem">_separatorstosystem</name>
      <comment>Converts the separators to the system separator</comment>
      <returntype>String</returntype>
      <parameter>
        <name>FileName</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="SeparatorsToUnix">_separatorstounix</name>
      <comment>Converts the separators to Unix separators.</comment>
      <returntype>String</returntype>
      <parameter>
        <name>FileName</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="SeparatorsToWindows">_separatorstowindows</name>
      <comment>Converts the separators to Windows separators.</comment>
      <returntype>String</returntype>
      <parameter>
        <name>FileName</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="SetLastModified">_setlastmodified</name>
      <comment>Updates the last modified date of the given file.</comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>Dir</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>FileName</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="StringToInputStream">_stringtoinputstream</name>
      <comment>Returns an InputStream for the given string.</comment>
      <returntype>anywheresoftware.b4a.objects.streams.File.InputStreamWrapper</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="Touch">_touch</name>
      <comment>Same as touch command on Unix. Sets the last modified date of a file if it exists, creates a file with the current date and time.</comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>Dir</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>FileName</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="WriteCharArray">_writechararray</name>
      <comment>Writes the given char array to a file</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Dir</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>FileName</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Input</name>
        <type>char[]</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="WriteStringArray">_writestringarray</name>
      <comment>Writes the String array to the given file. Items containing CRLF will be written to two lines</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Dir</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>FileName</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Input</name>
        <type>String[]</type>
      </parameter>
    </method>
  </class>
  <class>
    <name>com.mathew.jmmtools.listtools</name>
    <shortname>ListTools</shortname>
    <method>
      <name>IsInitialized</name>
      <comment>Tests whether the object has been initialized.</comment>
      <returntype>boolean</returntype>
    </method>
    <method>
      <name DesignerName="AddFirst">_addfirst</name>
      <comment>Adds Item to the first index</comment>
      <returntype>anywheresoftware.b4a.objects.collections.List</returntype>
      <parameter>
        <name>List</name>
        <type>anywheresoftware.b4a.objects.collections.List</type>
      </parameter>
      <parameter>
        <name>Item</name>
        <type>Object</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="AddLast">_addlast</name>
      <comment>Adds Item to the last index</comment>
      <returntype>anywheresoftware.b4a.objects.collections.List</returntype>
      <parameter>
        <name>List</name>
        <type>anywheresoftware.b4a.objects.collections.List</type>
      </parameter>
      <parameter>
        <name>Item</name>
        <type>Object</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="Equals">_equals</name>
      <comment>Returns true if both lists contains the same values, in the same order. </comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>List1</name>
        <type>anywheresoftware.b4a.objects.collections.List</type>
      </parameter>
      <parameter>
        <name>List2</name>
        <type>anywheresoftware.b4a.objects.collections.List</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="Fill">_fill</name>
      <comment>Fills the given array with FillWith.</comment>
      <returntype>String[]</returntype>
      <parameter>
        <name>List</name>
        <type>String[]</type>
      </parameter>
      <parameter>
        <name>FillWith</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="GetFirst">_getfirst</name>
      <comment>Returns but does not remove the first item in the list</comment>
      <returntype>Object</returntype>
      <parameter>
        <name>List</name>
        <type>anywheresoftware.b4a.objects.collections.List</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="GetLast">_getlast</name>
      <comment>Returns but does not remove the last item in the list</comment>
      <returntype>Object</returntype>
      <parameter>
        <name>List</name>
        <type>anywheresoftware.b4a.objects.collections.List</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="IsEmpty">_isempty</name>
      <comment>Tests whether List is empty.</comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>List</name>
        <type>anywheresoftware.b4a.objects.collections.List</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="IsEmpty2">_isempty2</name>
      <comment>Tests whether List is empty.</comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>List</name>
        <type>Object[]</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="IsIndexValid">_isindexvalid</name>
      <comment>Tests whether Index is valid in relation to Obects.</comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>Objects</name>
        <type>Object[]</type>
      </parameter>
      <parameter>
        <name>Index</name>
        <type>int</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="IsIndexValid2">_isindexvalid2</name>
      <comment>Tests whether Index is valid in relation to List.</comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>List</name>
        <type>anywheresoftware.b4a.objects.collections.List</type>
      </parameter>
      <parameter>
        <name>Index</name>
        <type>int</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="IsNotEmpty">_isnotempty</name>
      <comment>Tests whether List is not empty. </comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>List</name>
        <type>anywheresoftware.b4a.objects.collections.List</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="IsNotEmpty2">_isnotempty2</name>
      <comment>Tests whether List is not empty. </comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>List</name>
        <type>Object[]</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="IsSameLength">_issamelength</name>
      <comment>Tests whether the two lists are of the same size.</comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>List</name>
        <type>anywheresoftware.b4a.objects.collections.List</type>
      </parameter>
      <parameter>
        <name>List2</name>
        <type>anywheresoftware.b4a.objects.collections.List</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="IsUnique">_isunique</name>
      <comment>Returns true if the list contains no more than 1 of each item.  </comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>List</name>
        <type>anywheresoftware.b4a.objects.collections.List</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="ListIndexOf">_listindexof</name>
      <comment>Retruns the index of LookFor, or -1 of it wasn't found</comment>
      <returntype>int</returntype>
      <parameter>
        <name>List</name>
        <type>anywheresoftware.b4a.objects.collections.List</type>
      </parameter>
      <parameter>
        <name>LookFor</name>
        <type>Object</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="ListIndexOf2">_listindexof2</name>
      <comment>Returns the index of LookFor, starting from StartAt, or -1 if it wasn't found</comment>
      <returntype>int</returntype>
      <parameter>
        <name>List</name>
        <type>anywheresoftware.b4a.objects.collections.List</type>
      </parameter>
      <parameter>
        <name>LookFor</name>
        <type>Object</type>
      </parameter>
      <parameter>
        <name>StartAt</name>
        <type>int</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="ListIndexOf3">_listindexof3</name>
      <comment>Retruns the index of LookFor, or -1 of it wasn't found. Ignores the type of the objects</comment>
      <returntype>int</returntype>
      <parameter>
        <name>List</name>
        <type>anywheresoftware.b4a.objects.collections.List</type>
      </parameter>
      <parameter>
        <name>LookFor</name>
        <type>Object</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="ListIndexOf4">_listindexof4</name>
      <comment>Returns the index of LookFor, starting from StartAt, or -1 if it wasn't found. Ignores the type of the objects</comment>
      <returntype>int</returntype>
      <parameter>
        <name>List</name>
        <type>anywheresoftware.b4a.objects.collections.List</type>
      </parameter>
      <parameter>
        <name>LookFor</name>
        <type>Object</type>
      </parameter>
      <parameter>
        <name>StartAt</name>
        <type>int</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="PickRandomElement">_pickrandomelement</name>
      <comment>Returns a random item from the list.  </comment>
      <returntype>Object</returntype>
      <parameter>
        <name>List</name>
        <type>anywheresoftware.b4a.objects.collections.List</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="PickRandomElement2">_pickrandomelement2</name>
      <comment>Returns a random item from the array.</comment>
      <returntype>String</returntype>
      <parameter>
        <name>List</name>
        <type>String[]</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="Push">_push</name>
      <comment>Returns a new array that has NewItem pushed onto the end of Objects.</comment>
      <returntype>Object[]</returntype>
      <parameter>
        <name>Objects</name>
        <type>Object[]</type>
      </parameter>
      <parameter>
        <name>NewItem</name>
        <type>Object</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="RemoveFirst">_removefirst</name>
      <comment>Removes the first item from the list</comment>
      <returntype>anywheresoftware.b4a.objects.collections.List</returntype>
      <parameter>
        <name>List</name>
        <type>anywheresoftware.b4a.objects.collections.List</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="RemoveLast">_removelast</name>
      <comment>Removes the last item from the list</comment>
      <returntype>anywheresoftware.b4a.objects.collections.List</returntype>
      <parameter>
        <name>List</name>
        <type>anywheresoftware.b4a.objects.collections.List</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="Reverse">_reverse</name>
      <comment>Reverses the list</comment>
      <returntype>anywheresoftware.b4a.objects.collections.List</returntype>
      <parameter>
        <name>List</name>
        <type>anywheresoftware.b4a.objects.collections.List</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="RotateList">_rotatelist</name>
      <comment>Rotates the given list, by removing the first item and adding it to the end of the list. </comment>
      <returntype>anywheresoftware.b4a.objects.collections.List</returntype>
      <parameter>
        <name>List</name>
        <type>anywheresoftware.b4a.objects.collections.List</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="RotateList2">_rotatelist2</name>
      <comment>Similar to RotateList, but allows you to specifiy which item to move to the end.</comment>
      <returntype>anywheresoftware.b4a.objects.collections.List</returntype>
      <parameter>
        <name>List</name>
        <type>anywheresoftware.b4a.objects.collections.List</type>
      </parameter>
      <parameter>
        <name>Index</name>
        <type>int</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="Search">_search</name>
      <comment>Returns the search results for the given searchterm. </comment>
      <returntype>anywheresoftware.b4a.objects.collections.List</returntype>
      <parameter>
        <name>List</name>
        <type>anywheresoftware.b4a.objects.collections.List</type>
      </parameter>
      <parameter>
        <name>SearchTerm</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>CaseSensitive</name>
        <type>boolean</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="Search2">_search2</name>
      <comment>Returns the search results for the given searchterm. </comment>
      <returntype>anywheresoftware.b4a.objects.collections.List</returntype>
      <parameter>
        <name>List</name>
        <type>anywheresoftware.b4a.objects.collections.List</type>
      </parameter>
      <parameter>
        <name>SearchTerm</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>CaseSensitive</name>
        <type>boolean</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="Set">_set</name>
      <comment>Sets the object at Index to be NewItem. Throws an exception if the Inex is not valid.</comment>
      <returntype>Object[]</returntype>
      <parameter>
        <name>Objects</name>
        <type>Object[]</type>
      </parameter>
      <parameter>
        <name>NewItem</name>
        <type>Object</type>
      </parameter>
      <parameter>
        <name>Index</name>
        <type>int</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="ShuffleArray">_shufflearray</name>
      <comment>Shuffles the given String array</comment>
      <returntype>String[]</returntype>
      <parameter>
        <name>StringArray</name>
        <type>String[]</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="ShuffleList">_shufflelist</name>
      <comment>Shuffles the given list</comment>
      <returntype>anywheresoftware.b4a.objects.collections.List</returntype>
      <parameter>
        <name>List</name>
        <type>anywheresoftware.b4a.objects.collections.List</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="Sort">_sort</name>
      <comment>Sorts the given list.</comment>
      <returntype>anywheresoftware.b4a.objects.collections.List</returntype>
      <parameter>
        <name>List</name>
        <type>anywheresoftware.b4a.objects.collections.List</type>
      </parameter>
      <parameter>
        <name>Ascending</name>
        <type>boolean</type>
      </parameter>
      <parameter>
        <name>CaseSensitive</name>
        <type>boolean</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="SortArray">_sortarray</name>
      <comment>Sorts the given string array. </comment>
      <returntype>String[]</returntype>
      <parameter>
        <name>StringArray</name>
        <type>String[]</type>
      </parameter>
      <parameter>
        <name>Ascending</name>
        <type>boolean</type>
      </parameter>
      <parameter>
        <name>CaseSensitive</name>
        <type>boolean</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="SubList">_sublist</name>
      <comment>Returns the items in the list starting at StartIndex (Inclusive), and stopping at the end of the List.</comment>
      <returntype>anywheresoftware.b4a.objects.collections.List</returntype>
      <parameter>
        <name>List</name>
        <type>anywheresoftware.b4a.objects.collections.List</type>
      </parameter>
      <parameter>
        <name>StartIndex</name>
        <type>int</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="SubList2">_sublist2</name>
      <comment>Similar to SubList, but you can also specify the EndIndex (exclusive)</comment>
      <returntype>anywheresoftware.b4a.objects.collections.List</returntype>
      <parameter>
        <name>List</name>
        <type>anywheresoftware.b4a.objects.collections.List</type>
      </parameter>
      <parameter>
        <name>StartIndex</name>
        <type>int</type>
      </parameter>
      <parameter>
        <name>EndIndex</name>
        <type>int</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="Swap">_swap</name>
      <returntype>anywheresoftware.b4a.objects.collections.List</returntype>
      <parameter>
        <name>List</name>
        <type>anywheresoftware.b4a.objects.collections.List</type>
      </parameter>
      <parameter>
        <name>Index1</name>
        <type>int</type>
      </parameter>
      <parameter>
        <name>Index2</name>
        <type>int</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="ToString">_tostring</name>
      <comment>Converts the given list, separating the items with ,</comment>
      <returntype>String</returntype>
      <parameter>
        <name>List</name>
        <type>anywheresoftware.b4a.objects.collections.List</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="ToString2">_tostring2</name>
      <comment>Convets the list to a string, separating the items with a new line</comment>
      <returntype>String</returntype>
      <parameter>
        <name>List</name>
        <type>anywheresoftware.b4a.objects.collections.List</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="ToString3">_tostring3</name>
      <comment>Converts the list to a string, using separator as the separator</comment>
      <returntype>String</returntype>
      <parameter>
        <name>List</name>
        <type>anywheresoftware.b4a.objects.collections.List</type>
      </parameter>
      <parameter>
        <name>Separator</name>
        <type>char</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="ToString4">_tostring4</name>
      <comment>Converts the list to a string, using separator as the separator</comment>
      <returntype>String</returntype>
      <parameter>
        <name>List</name>
        <type>anywheresoftware.b4a.objects.collections.List</type>
      </parameter>
      <parameter>
        <name>Separator</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="ToStringArray">_tostringarray</name>
      <comment>Converts the given list to a string array.</comment>
      <returntype>String[]</returntype>
      <parameter>
        <name>List</name>
        <type>anywheresoftware.b4a.objects.collections.List</type>
      </parameter>
    </method>
  </class>
  <class>
    <name>com.mathew.jmmtools.booleantools</name>
    <shortname>BooleanTools</shortname>
    <method>
      <name>IsInitialized</name>
      <comment>Tests whether the object has been initialized.</comment>
      <returntype>boolean</returntype>
    </method>
    <method>
      <name DesignerName="And2">_and2</name>
      <comment>Performs an And on an array of booleans. </comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>Inputs</name>
        <type>boolean[]</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="FromInt">_fromint</name>
      <comment>Returns True if input is 1, False otherwise</comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>Input</name>
        <type>int</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="FromInt2">_fromint2</name>
      <comment>Returns is True if Input is TrueValue, False otherwise</comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>Input</name>
        <type>int</type>
      </parameter>
      <parameter>
        <name>TrueValue</name>
        <type>int</type>
      </parameter>
      <parameter>
        <name>FalseValue</name>
        <type>int</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="Iif">_iif</name>
      <comment>Single line If statement. If Value is true returns Reponse1 else Response2. </comment>
      <returntype>String</returntype>
      <parameter>
        <name>Value</name>
        <type>boolean</type>
      </parameter>
      <parameter>
        <name>Response1</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Response2</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="IsFalse">_isfalse</name>
      <comment>Checks if input is false</comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>Input</name>
        <type>boolean</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="IsNotFalse">_isnotfalse</name>
      <comment>Checks if Input is not false</comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>Input</name>
        <type>boolean</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="IsNotTrue">_isnottrue</name>
      <comment>Checks if input is not true</comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>Input</name>
        <type>boolean</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="IsTrue">_istrue</name>
      <comment>Checks if input is true</comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>Input</name>
        <type>boolean</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="Negate">_negate</name>
      <returntype>boolean</returntype>
      <parameter>
        <name>Value</name>
        <type>boolean</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="Or2">_or2</name>
      <comment>Performs an Or on an array of booleans. </comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>Inputs</name>
        <type>boolean[]</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="ToInt">_toint</name>
      <comment>Returns 1 for true and 0 for false</comment>
      <returntype>int</returntype>
      <parameter>
        <name>Input</name>
        <type>boolean</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="ToInt2">_toint2</name>
      <comment>Returns TrueValue for true, FalseValue if false</comment>
      <returntype>int</returntype>
      <parameter>
        <name>Input</name>
        <type>boolean</type>
      </parameter>
      <parameter>
        <name>TrueValue</name>
        <type>int</type>
      </parameter>
      <parameter>
        <name>FalseValue</name>
        <type>int</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="ToString">_tostring</name>
      <comment>Returns TrueValue for true, FalseValue if false</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Input</name>
        <type>boolean</type>
      </parameter>
      <parameter>
        <name>TrueValue</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>FalseValue</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="ToStringOnOff">_tostringonoff</name>
      <comment>Returns On for True, and Off for false</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Input</name>
        <type>boolean</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="ToStringTrueFalse">_tostringtruefalse</name>
      <returntype>String</returntype>
      <parameter>
        <name>Value</name>
        <type>boolean</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="ToStringYesNo">_tostringyesno</name>
      <comment>Returns Yes for True, and No for false</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Input</name>
        <type>boolean</type>
      </parameter>
    </method>
  </class>
  <class>
    <name>com.mathew.jmmtools.systemtools</name>
    <shortname>SystemTools</shortname>
    <method>
      <name>IsInitialized</name>
      <comment>Tests whether the object has been initialized.</comment>
      <returntype>boolean</returntype>
    </method>
    <method>
      <name DesignerName="ClipboardFull">_clipboardfull</name>
      <comment>Returns true if the clipboard currently is storing something, such as an image, files, or a string.</comment>
      <returntype>boolean</returntype>
    </method>
    <method>
      <name DesignerName="IsMac">_ismac</name>
      <comment>Returns true if this is Mac OS. </comment>
      <returntype>boolean</returntype>
    </method>
    <method>
      <name DesignerName="IsWindows">_iswindows</name>
      <comment>Returns true if this is Windows. </comment>
      <returntype>boolean</returntype>
    </method>
    <method>
      <name DesignerName="JavaHome">_javahome</name>
      <comment>Returns the installation path of Java, returning an empty string if there is no value</comment>
      <returntype>String</returntype>
    </method>
    <method>
      <name DesignerName="JavaHome2">_javahome2</name>
      <comment>Returns the installation path of Java, returning DefaultValue if there is no value</comment>
      <returntype>String</returntype>
      <parameter>
        <name>DefaultValue</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="JavaVendor">_javavendor</name>
      <comment>Returns the name of the Java Vendor, returning an empty string if there is no value</comment>
      <returntype>String</returntype>
    </method>
    <method>
      <name DesignerName="JavaVendor2">_javavendor2</name>
      <comment>'Returns the name of the Java Vendor, retruning DefaultValue if there is no value</comment>
      <returntype>String</returntype>
      <parameter>
        <name>DefaultValue</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="JavaVendorURL">_javavendorurl</name>
      <comment>Returns the Java Vendor's website, returning an empty string if there is no value</comment>
      <returntype>String</returntype>
    </method>
    <method>
      <name DesignerName="JavaVendorURL2">_javavendorurl2</name>
      <comment>Returns the Java Vendor's website, returning DefaultValue if there is no value</comment>
      <returntype>String</returntype>
      <parameter>
        <name>DefaultValue</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="JavaVersion">_javaversion</name>
      <comment>Returns the Java version, returning an empty string if there is no value</comment>
      <returntype>String</returntype>
    </method>
    <method>
      <name DesignerName="JavaVersion2">_javaversion2</name>
      <comment>Returns the Java version, returning DefaultValue if there is no value</comment>
      <returntype>String</returntype>
      <parameter>
        <name>DefaultValue</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="NoFonts">_nofonts</name>
      <comment>Returns the number of fonts available. </comment>
      <returntype>int</returntype>
    </method>
    <method>
      <name DesignerName="NoScreens">_noscreens</name>
      <comment>Returns the number of screens available. </comment>
      <returntype>int</returntype>
    </method>
    <method>
      <name DesignerName="OSArchitecture">_osarchitecture</name>
      <comment>Returns the operating system's architecture, returning an empty string if there is no value</comment>
      <returntype>String</returntype>
    </method>
    <method>
      <name DesignerName="OSArchitecture2">_osarchitecture2</name>
      <comment>Returns the operating system's architecture, returning DefaultValue if there is no value</comment>
      <returntype>String</returntype>
      <parameter>
        <name>DefaultValue</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="OSName">_osname</name>
      <comment>Returns the name of the operating system, returning an empty string if there is no value</comment>
      <returntype>String</returntype>
    </method>
    <method>
      <name DesignerName="OSName2">_osname2</name>
      <comment>Returns the name of the operating system, returning DefaultValue if there is no value</comment>
      <returntype>String</returntype>
      <parameter>
        <name>DefaultValue</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="OSVersion">_osversion</name>
      <comment>Returns the version of the operating system, returning an empty string if there is no value</comment>
      <returntype>String</returntype>
    </method>
    <method>
      <name DesignerName="OSVersion2">_osversion2</name>
      <comment>Returns the version of the operating system, returning DefaultValue if there is no value</comment>
      <returntype>String</returntype>
      <parameter>
        <name>DefaultValue</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="UserDir">_userdir</name>
      <comment>Returns the user's working directory, returning an empty string if there is no value</comment>
      <returntype>String</returntype>
    </method>
    <method>
      <name DesignerName="UserDir2">_userdir2</name>
      <comment>Returns the user's working directory, returning DefaultValue if there is no value</comment>
      <returntype>String</returntype>
      <parameter>
        <name>DefaultValue</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="UserHome">_userhome</name>
      <comment>Returns the user's home directory, returning an empty string if there is no value</comment>
      <returntype>String</returntype>
    </method>
    <method>
      <name DesignerName="UserHome2">_userhome2</name>
      <comment>Returns the user's home directory, returning DefaultValue if there is no value</comment>
      <returntype>String</returntype>
      <parameter>
        <name>DefaultValue</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="UserName">_username</name>
      <comment>Returns the logged on user's name, returning an empty string if there is no value</comment>
      <returntype>String</returntype>
    </method>
    <method>
      <name DesignerName="UserName2">_username2</name>
      <comment>Returns the loggend on user's name, returning DefaultValue if there is no value</comment>
      <returntype>String</returntype>
      <parameter>
        <name>DefaultValue</name>
        <type>String</type>
      </parameter>
    </method>
  </class>
  <class>
    <name>com.mathew.jmmtools.basetools</name>
    <shortname>BaseTools</shortname>
    <method>
      <name>IsInitialized</name>
      <comment>Tests whether the object has been initialized.</comment>
      <returntype>boolean</returntype>
    </method>
    <method>
      <name DesignerName="Author">_author</name>
      <comment>Returns the author of the library.</comment>
      <returntype>String</returntype>
    </method>
    <method>
      <name DesignerName="Copyright">_copyright</name>
      <comment>Returns the copyright of the library.</comment>
      <returntype>String</returntype>
    </method>
    <method>
      <name DesignerName="Name">_name</name>
      <comment>Returns the name of the library.</comment>
      <returntype>String</returntype>
    </method>
    <method>
      <name DesignerName="Version">_version</name>
      <comment>Returns the version of the library.</comment>
      <returntype>String</returntype>
    </method>
  </class>
  <class>
    <name>com.mathew.jmmtools.numbertools</name>
    <shortname>NumberTools</shortname>
    <method>
      <name>IsInitialized</name>
      <comment>Tests whether the object has been initialized.</comment>
      <returntype>boolean</returntype>
    </method>
    <method>
      <name DesignerName="ArithmeticGeometicMean">_arithmeticgeometicmean</name>
      <comment>Returns the AGM of A and B</comment>
      <returntype>double</returntype>
      <parameter>
        <name>A</name>
        <type>double</type>
      </parameter>
      <parameter>
        <name>B</name>
        <type>double</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="Cube">_cube</name>
      <comment>Returns the cube of the given input. </comment>
      <returntype>double</returntype>
      <parameter>
        <name>Input</name>
        <type>double</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="DotProduct">_dotproduct</name>
      <comment>Calculates the dot product of a number. Throws an exception of the arrays are not of the same size. </comment>
      <returntype>double</returntype>
      <parameter>
        <name>A</name>
        <type>double[]</type>
      </parameter>
      <parameter>
        <name>B</name>
        <type>double[]</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="EqulibirimIndices">_equlibirimindices</name>
      <comment>An equilibrium index of a sequence is an index into the sequence such that the sum of elements at lower indices is equal to the sum of elements at higher indices.</comment>
      <returntype>anywheresoftware.b4a.objects.collections.List</returntype>
      <parameter>
        <name>Sequence</name>
        <type>int[]</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="Fibonacci">_fibonacci</name>
      <comment>Calculates the Fibnacci sequence.
&lt;code&gt;Dim nt as NumberTools
For i = 1 To 16
	Log(nt.Fibonacci(i))
Next&lt;/code&gt;</comment>
      <returntype>long</returntype>
      <parameter>
        <name>N</name>
        <type>int</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="FlipCoin">_flipcoin</name>
      <comment>Flips a coin, returning heads or tails</comment>
      <returntype>String</returntype>
    </method>
    <method>
      <name DesignerName="FlipCoin2">_flipcoin2</name>
      <comment>Flips a coin, returning Heads or Tails</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Heads</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Tails</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="FuzzyEquals">_fuzzyequals</name>
      <comment>Returns true if A and B are with in Tolerance of each other. </comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>A</name>
        <type>double</type>
      </parameter>
      <parameter>
        <name>B</name>
        <type>double</type>
      </parameter>
      <parameter>
        <name>Tolerance</name>
        <type>double</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="GreatestCommonDivisor">_greatestcommondivisor</name>
      <comment>Returns the greatest commond divisor of 2 numbers. </comment>
      <returntype>int</returntype>
      <parameter>
        <name>A</name>
        <type>int</type>
      </parameter>
      <parameter>
        <name>B</name>
        <type>int</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="IsEmirp">_isemirp</name>
      <comment>Tests whether a number is an emirp (A prime number that when reversed is a different prime number).</comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>Value</name>
        <type>int</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="IsEven">_iseven</name>
      <comment>Tests whether Input is an even number.</comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>Input</name>
        <type>int</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="IsEvil">_isevil</name>
      <comment>Returns true if Input is an evil number</comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>Input</name>
        <type>int</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="IsHappy">_ishappy</name>
      <comment>Returns whether or not Number is a happy number. 
A happy number is defined by the following process. Starting with any positive integer, replace the number by the sum of the squares of its digits, and repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1.</comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>Number</name>
        <type>int</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="IsNarcissistic">_isnarcissistic</name>
      <comment>Tests whether Input is a Narcissistic number. </comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>Input</name>
        <type>long</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="IsOdd">_isodd</name>
      <comment>Tests whether Input is an odd number.</comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>Input</name>
        <type>int</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="IsOdious">_isodious</name>
      <comment>Returns true if Input is an odious number. </comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>Input</name>
        <type>int</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="IsPerfect">_isperfect</name>
      <comment>Calculates whether or not a number is perfect. 
A perfect number is a positive integer that is the sum of its proper positive divisors excluding the number itself. Equivalently, a perfect number is a number that is half the sum of all of its positive divisors (including itself).</comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>N</name>
        <type>int</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="IsPernicious">_ispernicious</name>
      <comment>Tests whther a number is pernicious, that is has a population count that is a prime number.</comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>Input</name>
        <type>int</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="IsPrime">_isprime</name>
      <comment>Checks whether a is a prime.</comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>a</name>
        <type>int</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="IsSelfDescribing">_isselfdescribing</name>
      <comment>Calculates whether Input is a self describing number.</comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>Input</name>
        <type>int</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="Luhn">_luhn</name>
      <comment>Checks whether a credit card number is valid checking it using the Luhn method. This doesn't mean the number exists, just checks it is valid. </comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>Number</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="Max2">_max2</name>
      <comment>Similar to Max, but takes 3 numbers.</comment>
      <returntype>double</returntype>
      <parameter>
        <name>Number1</name>
        <type>double</type>
      </parameter>
      <parameter>
        <name>Number2</name>
        <type>double</type>
      </parameter>
      <parameter>
        <name>Number3</name>
        <type>double</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="Max3">_max3</name>
      <comment>Returns the largest number from an array of numbers.</comment>
      <returntype>double</returntype>
      <parameter>
        <name>Numbers</name>
        <type>double[]</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="Median">_median</name>
      <comment>Returns the median of the given values</comment>
      <returntype>double</returntype>
      <parameter>
        <name>Doubles</name>
        <type>double[]</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="MiddleThreeDigits">_middlethreedigits</name>
      <comment>Returns the middle 3 digits in N. Throws an exception if the number is not odd or the length is less than 3</comment>
      <returntype>int</returntype>
      <parameter>
        <name>N</name>
        <type>int</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="Min2">_min2</name>
      <comment>Similar to Min, but takes 3 numbers. </comment>
      <returntype>double</returntype>
      <parameter>
        <name>Number1</name>
        <type>double</type>
      </parameter>
      <parameter>
        <name>Number2</name>
        <type>double</type>
      </parameter>
      <parameter>
        <name>Number3</name>
        <type>double</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="Min3">_min3</name>
      <comment>Returns the smallest number from an array of numbers.</comment>
      <returntype>double</returntype>
      <parameter>
        <name>Numbers</name>
        <type>double[]</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="NextDown">_nextdown</name>
      <comment>Returns the next number down from Value. </comment>
      <returntype>int</returntype>
      <parameter>
        <name>Value</name>
        <type>int</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="NextUp">_nextup</name>
      <comment>Returns the next number up from Value. </comment>
      <returntype>int</returntype>
      <parameter>
        <name>Value</name>
        <type>int</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="PopulationCount">_populationcount</name>
      <comment>Gets the population count of Input. </comment>
      <returntype>int</returntype>
      <parameter>
        <name>Input</name>
        <type>int</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="PopulationCount2">_populationcount2</name>
      <comment>Gets the population count of Input, input being a binary string. </comment>
      <returntype>int</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="Random">_random</name>
      <comment>Returns a random number between 1 (inclusive) and 101 (exclusive)</comment>
      <returntype>int</returntype>
    </method>
    <method>
      <name DesignerName="Random2">_random2</name>
      <comment>Returns a random number between 0 (inclusive) and UpperLimit (exclusive)</comment>
      <returntype>int</returntype>
      <parameter>
        <name>UpperLimit</name>
        <type>int</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="Random3">_random3</name>
      <comment>Returns a randm number between LowerLimit (inclusive) and LowerLimit times by 9999 (exclusive)</comment>
      <returntype>int</returntype>
      <parameter>
        <name>LowerLimit</name>
        <type>int</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="RollDice">_rolldice</name>
      <comment>Rolls a dice and returns the outcome of the roll.</comment>
      <returntype>int</returntype>
    </method>
    <method>
      <name DesignerName="RollDice2">_rolldice2</name>
      <comment>Returns NoDice rolled dice, with Sides being the upper limit (inclusive). </comment>
      <returntype>int[]</returntype>
      <parameter>
        <name>NoDice</name>
        <type>int</type>
      </parameter>
      <parameter>
        <name>Sides</name>
        <type>int</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="StirlingGamma">_stirlinggamma</name>
      <comment>Returns the Stirling Gamma of a number. </comment>
      <returntype>double</returntype>
      <parameter>
        <name>X</name>
        <type>double</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="Sums">_sums</name>
      <comment>Returns the sum of the given list. </comment>
      <returntype>double</returntype>
      <parameter>
        <name>Input</name>
        <type>anywheresoftware.b4a.objects.collections.List</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="TimesTable">_timestable</name>
      <comment>Generates a times table for the specified number.</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Table</name>
        <type>int</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="TimesTable2">_timestable2</name>
      <comment>Similar to TimesTable, but allows you to specify the upper limit.</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Table</name>
        <type>int</type>
      </parameter>
      <parameter>
        <name>Upper</name>
        <type>int</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="TimesTable3">_timestable3</name>
      <comment>'Similar to TimesTable but allows you to specifiy the lower and upper limits. </comment>
      <returntype>String</returntype>
      <parameter>
        <name>Table</name>
        <type>int</type>
      </parameter>
      <parameter>
        <name>Lower</name>
        <type>int</type>
      </parameter>
      <parameter>
        <name>Upper</name>
        <type>int</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="ToArabic">_toarabic</name>
      <comment>Converts Input to an Arabic numeral</comment>
      <returntype>int</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="ToArabicSingle">_toarabicsingle</name>
      <comment>Converts Input to an Arabic numeral</comment>
      <returntype>int</returntype>
      <parameter>
        <name>Input</name>
        <type>char</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="ToRoman">_toroman</name>
      <comment>Converts Input to a Roman numeral</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Input</name>
        <type>int</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="ToWords">_towords</name>
      <comment>Converts Number to its English representation. the maximum number supported is 1000.</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Number</name>
        <type>int</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="ToWords2">_towords2</name>
      <comment>Converts Input to its English representation. The minimum number supported is -9999999. The maximum number supported is 9999999.</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Number</name>
        <type>int</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="TriangleNumbers">_trianglenumbers</name>
      <comment>Calculates the first Limit triangle numbers. </comment>
      <returntype>int[]</returntype>
      <parameter>
        <name>Limit</name>
        <type>int</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="Variance">_variance</name>
      <comment>Calculates the variance, when the mean is not known</comment>
      <returntype>double</returntype>
      <parameter>
        <name>List</name>
        <type>anywheresoftware.b4a.objects.collections.List</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="Variance2">_variance2</name>
      <comment>Calculates the variance, when the mean is known. </comment>
      <returntype>double</returntype>
      <parameter>
        <name>List</name>
        <type>anywheresoftware.b4a.objects.collections.List</type>
      </parameter>
      <parameter>
        <name>TheMean</name>
        <type>double</type>
      </parameter>
    </method>
  </class>
  <class>
    <name>com.mathew.jmmtools.colourtools</name>
    <shortname>ColourTools</shortname>
    <method>
      <name>IsInitialized</name>
      <comment>Tests whether the object has been initialized.</comment>
      <returntype>boolean</returntype>
    </method>
    <method>
      <name DesignerName="IsSameColour">_issamecolour</name>
      <comment>Returns true if Colour1 and Colour2 represent the same colour. </comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>Colour1</name>
        <type>anywheresoftware.b4j.objects.JFX.PaintWrapper</type>
      </parameter>
      <parameter>
        <name>Colour2</name>
        <type>anywheresoftware.b4j.objects.JFX.PaintWrapper</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="RandomColour">_randomcolour</name>
      <comment>Returns a random colour, with alpha set to 255.</comment>
      <returntype>anywheresoftware.b4j.objects.JFX.PaintWrapper</returntype>
    </method>
    <method>
      <name DesignerName="RandomColour2">_randomcolour2</name>
      <comment>Returns a random colour. </comment>
      <returntype>anywheresoftware.b4j.objects.JFX.PaintWrapper</returntype>
    </method>
  </class>
  <class>
    <name>com.mathew.jmmtools.stringbuildertools</name>
    <shortname>StringBuilderTools</shortname>
    <method>
      <name>IsInitialized</name>
      <comment>Tests whether the object has been initialized.</comment>
      <returntype>boolean</returntype>
    </method>
    <method>
      <name DesignerName="AppendAll">_appendall</name>
      <comment>Appends an array of strings to StringBuilder.</comment>
      <returntype>anywheresoftware.b4a.keywords.StringBuilderWrapper</returntype>
      <parameter>
        <name>StringBuilder</name>
        <type>anywheresoftware.b4a.keywords.StringBuilderWrapper</type>
      </parameter>
      <parameter>
        <name>Input</name>
        <type>String[]</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="AppendAll2">_appendall2</name>
      <comment>Similar to AppendAll, but allows you to specify a spearator.</comment>
      <returntype>anywheresoftware.b4a.keywords.StringBuilderWrapper</returntype>
      <parameter>
        <name>StringBuilder</name>
        <type>anywheresoftware.b4a.keywords.StringBuilderWrapper</type>
      </parameter>
      <parameter>
        <name>Input</name>
        <type>String[]</type>
      </parameter>
      <parameter>
        <name>Separator</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="AppendLn">_appendln</name>
      <comment>Appends Text and a new line to StringBuilder.</comment>
      <returntype>anywheresoftware.b4a.keywords.StringBuilderWrapper</returntype>
      <parameter>
        <name>StringBuilder</name>
        <type>anywheresoftware.b4a.keywords.StringBuilderWrapper</type>
      </parameter>
      <parameter>
        <name>Text</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="AppendNewLine">_appendnewline</name>
      <comment>Appends a new line to the end of the StringBuilder.</comment>
      <returntype>anywheresoftware.b4a.keywords.StringBuilderWrapper</returntype>
      <parameter>
        <name>StringBuilder</name>
        <type>anywheresoftware.b4a.keywords.StringBuilderWrapper</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="AppendSeparator">_appendseparator</name>
      <comment>Appends Spearator to the end of the StringBuilder, if StringBuilder is not empty.</comment>
      <returntype>anywheresoftware.b4a.keywords.StringBuilderWrapper</returntype>
      <parameter>
        <name>StringBuilder</name>
        <type>anywheresoftware.b4a.keywords.StringBuilderWrapper</type>
      </parameter>
      <parameter>
        <name>Separator</name>
        <type>char</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="AppendStringBuilder">_appendstringbuilder</name>
      <comment>Appends another StringBuilder to StringBuilder.</comment>
      <returntype>anywheresoftware.b4a.keywords.StringBuilderWrapper</returntype>
      <parameter>
        <name>StringBuilder</name>
        <type>anywheresoftware.b4a.keywords.StringBuilderWrapper</type>
      </parameter>
      <parameter>
        <name>StringBuilder2</name>
        <type>anywheresoftware.b4a.keywords.StringBuilderWrapper</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="CharAt">_charat</name>
      <comment>Returns the character at the specified index.</comment>
      <returntype>char</returntype>
      <parameter>
        <name>StringBuilder</name>
        <type>anywheresoftware.b4a.keywords.StringBuilderWrapper</type>
      </parameter>
      <parameter>
        <name>Index</name>
        <type>int</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="Clear">_clear</name>
      <comment>Clears the given StringBuilder.</comment>
      <returntype>anywheresoftware.b4a.keywords.StringBuilderWrapper</returntype>
      <parameter>
        <name>SB</name>
        <type>anywheresoftware.b4a.keywords.StringBuilderWrapper</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="Contains">_contains</name>
      <comment>Returns true if SB contains SearchFor</comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>SearchFor</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>SB</name>
        <type>anywheresoftware.b4a.keywords.StringBuilderWrapper</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="EndsWith">_endswith</name>
      <comment>Returns true if SB ends with suffix.</comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>Suffix</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>SB</name>
        <type>anywheresoftware.b4a.keywords.StringBuilderWrapper</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="IndexOf">_indexof</name>
      <comment>Returns the first index of SearchFor. </comment>
      <returntype>int</returntype>
      <parameter>
        <name>SearchFor</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>SB</name>
        <type>anywheresoftware.b4a.keywords.StringBuilderWrapper</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="IndexOf2">_indexof2</name>
      <comment>Returns the first index of SearchFor, starting from StartAt.</comment>
      <returntype>int</returntype>
      <parameter>
        <name>SearchFor</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>StartAt</name>
        <type>int</type>
      </parameter>
      <parameter>
        <name>SB</name>
        <type>anywheresoftware.b4a.keywords.StringBuilderWrapper</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="IsEmpty">_isempty</name>
      <comment>Tests whether StringBuilder is empty.</comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>StringBuilder</name>
        <type>anywheresoftware.b4a.keywords.StringBuilderWrapper</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="IsNumber1">_isnumber1</name>
      <comment>Returns true if SB is a number.</comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>SB</name>
        <type>anywheresoftware.b4a.keywords.StringBuilderWrapper</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="ReadToStringBuilder">_readtostringbuilder</name>
      <comment>Appends the contents of the specified file to the StringBuilder. </comment>
      <returntype>String</returntype>
      <parameter>
        <name>Dir</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>FileName</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>SB</name>
        <type>anywheresoftware.b4a.keywords.StringBuilderWrapper</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="ReadToStringBuilder2">_readtostringbuilder2</name>
      <comment>Reads the contents of the specified file to the StringBuilder. </comment>
      <returntype>anywheresoftware.b4a.keywords.StringBuilderWrapper</returntype>
      <parameter>
        <name>Dir</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>FileName</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="Repeat">_repeat</name>
      <comment>Repeats SB Times times. </comment>
      <returntype>anywheresoftware.b4a.keywords.StringBuilderWrapper</returntype>
      <parameter>
        <name>SB</name>
        <type>anywheresoftware.b4a.keywords.StringBuilderWrapper</type>
      </parameter>
      <parameter>
        <name>Times</name>
        <type>int</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="Replace">_replace</name>
      <comment>Returns SB, with Target replaced with Replacement.</comment>
      <returntype>anywheresoftware.b4a.keywords.StringBuilderWrapper</returntype>
      <parameter>
        <name>Target</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Replacement</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>SB</name>
        <type>anywheresoftware.b4a.keywords.StringBuilderWrapper</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="SetCharAt">_setcharat</name>
      <comment>Sets the character at the given index. </comment>
      <returntype>anywheresoftware.b4a.keywords.StringBuilderWrapper</returntype>
      <parameter>
        <name>SB</name>
        <type>anywheresoftware.b4a.keywords.StringBuilderWrapper</type>
      </parameter>
      <parameter>
        <name>Index</name>
        <type>int</type>
      </parameter>
      <parameter>
        <name>Input</name>
        <type>char</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="StartsWith">_startswith</name>
      <comment>Returns true if SB starts with Prefix.</comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>Prefix</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>SB</name>
        <type>anywheresoftware.b4a.keywords.StringBuilderWrapper</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="StringToStringBuilder">_stringtostringbuilder</name>
      <comment>Converts a String to a StringBuilder. </comment>
      <returntype>anywheresoftware.b4a.keywords.StringBuilderWrapper</returntype>
      <parameter>
        <name>Input</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="ToCharArray">_tochararray</name>
      <comment>Returns a char array containing the contents of SB.</comment>
      <returntype>char[]</returntype>
      <parameter>
        <name>SB</name>
        <type>anywheresoftware.b4a.keywords.StringBuilderWrapper</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="ToCharArray2">_tochararray2</name>
      <comment>Converts SB to an array of chars. </comment>
      <returntype>char[]</returntype>
      <parameter>
        <name>SB</name>
        <type>anywheresoftware.b4a.keywords.StringBuilderWrapper</type>
      </parameter>
      <parameter>
        <name>StartIndex</name>
        <type>int</type>
      </parameter>
      <parameter>
        <name>EndIndex</name>
        <type>int</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="ToLowercase">_tolowercase</name>
      <comment>Converts the StringBuilder to lowercase.</comment>
      <returntype>anywheresoftware.b4a.keywords.StringBuilderWrapper</returntype>
      <parameter>
        <name>SB</name>
        <type>anywheresoftware.b4a.keywords.StringBuilderWrapper</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="ToUppercase">_touppercase</name>
      <comment>Converts the StringBuilder to uppercase.</comment>
      <returntype>anywheresoftware.b4a.keywords.StringBuilderWrapper</returntype>
      <parameter>
        <name>SB</name>
        <type>anywheresoftware.b4a.keywords.StringBuilderWrapper</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="Trim">_trim</name>
      <comment>Trims the StringBuilder.</comment>
      <returntype>anywheresoftware.b4a.keywords.StringBuilderWrapper</returntype>
      <parameter>
        <name>SB</name>
        <type>anywheresoftware.b4a.keywords.StringBuilderWrapper</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="WriteStringBuilder">_writestringbuilder</name>
      <comment>Writes the given StringBuilder to a file.</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Dir</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>FileName</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>SB</name>
        <type>anywheresoftware.b4a.keywords.StringBuilderWrapper</type>
      </parameter>
    </method>
  </class>
  <class>
    <name>com.mathew.jmmtools.objecttools</name>
    <shortname>ObjectTools</shortname>
    <method>
      <name>IsInitialized</name>
      <comment>Tests whether the object has been initialized.</comment>
      <returntype>boolean</returntype>
    </method>
    <method>
      <name DesignerName="Clone">_clone</name>
      <comment>Returns a new copy of Obj</comment>
      <returntype>Object</returntype>
      <parameter>
        <name>Obj</name>
        <type>Object</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="Equals">_equals</name>
      <comment>Determines whether Obj is equal to other.</comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>Obj</name>
        <type>Object</type>
      </parameter>
      <parameter>
        <name>Other</name>
        <type>Object</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="ToString">_tostring</name>
      <comment>Returns Obj as a string</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Obj</name>
        <type>Object</type>
      </parameter>
    </method>
  </class>
  <class>
    <name>com.mathew.jmmtools.maptools</name>
    <shortname>MapTools</shortname>
    <method>
      <name>IsInitialized</name>
      <comment>Tests whether the object has been initialized.</comment>
      <returntype>boolean</returntype>
    </method>
    <method>
      <name DesignerName="ContainsKey">_containskey</name>
      <returntype>boolean</returntype>
      <parameter>
        <name>Map</name>
        <type>anywheresoftware.b4a.objects.collections.Map</type>
      </parameter>
      <parameter>
        <name>Key</name>
        <type>Object</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="ContainsValue">_containsvalue</name>
      <returntype>boolean</returntype>
      <parameter>
        <name>Map</name>
        <type>anywheresoftware.b4a.objects.collections.Map</type>
      </parameter>
      <parameter>
        <name>Value</name>
        <type>Object</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="FromList">_fromlist</name>
      <returntype>anywheresoftware.b4a.objects.collections.Map</returntype>
      <parameter>
        <name>List</name>
        <type>anywheresoftware.b4a.objects.collections.List</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="GetFirst">_getfirst</name>
      <comment>Gets, but does not remove the first entry, or null of the map is empty. </comment>
      <returntype>Object</returntype>
      <parameter>
        <name>Map</name>
        <type>anywheresoftware.b4a.objects.collections.Map</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="GetFirstKey">_getfirstkey</name>
      <comment>Gets, but does not remove the first key, or null of the map is empty. </comment>
      <returntype>Object</returntype>
      <parameter>
        <name>Map</name>
        <type>anywheresoftware.b4a.objects.collections.Map</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="GetLast">_getlast</name>
      <comment>Returns but does not remove the last entry, or null if the map is empty. </comment>
      <returntype>Object</returntype>
      <parameter>
        <name>Map</name>
        <type>anywheresoftware.b4a.objects.collections.Map</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="GetLastKey">_getlastkey</name>
      <comment>Returns but does not remove the last key, or null if the map is empty. </comment>
      <returntype>Object</returntype>
      <parameter>
        <name>Map</name>
        <type>anywheresoftware.b4a.objects.collections.Map</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="IsEmpty">_isempty</name>
      <comment>Returns true if Map has no entries. </comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>Map</name>
        <type>anywheresoftware.b4a.objects.collections.Map</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="Keys">_keys</name>
      <returntype>anywheresoftware.b4a.objects.collections.List</returntype>
      <parameter>
        <name>Map</name>
        <type>anywheresoftware.b4a.objects.collections.Map</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="PutAll">_putall</name>
      <comment>Puts all the entries in FromMap in ToMap. </comment>
      <returntype>String</returntype>
      <parameter>
        <name>ToMap</name>
        <type>anywheresoftware.b4a.objects.collections.Map</type>
      </parameter>
      <parameter>
        <name>FromMap</name>
        <type>anywheresoftware.b4a.objects.collections.Map</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="RemoveFirst">_removefirst</name>
      <comment>Gets and removes the first entry, or null if the map is empty.</comment>
      <returntype>Object</returntype>
      <parameter>
        <name>Map</name>
        <type>anywheresoftware.b4a.objects.collections.Map</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="RemoveLast">_removelast</name>
      <comment>Gets and remove the last entry, or null if the map is emtpy. </comment>
      <returntype>Object</returntype>
      <parameter>
        <name>Map</name>
        <type>anywheresoftware.b4a.objects.collections.Map</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="ToList">_tolist</name>
      <returntype>anywheresoftware.b4a.objects.collections.List</returntype>
      <parameter>
        <name>Map</name>
        <type>anywheresoftware.b4a.objects.collections.Map</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="ToString">_tostring</name>
      <comment>Returns a string representation of the map in the format of Key: Entry. </comment>
      <returntype>String</returntype>
      <parameter>
        <name>Map</name>
        <type>anywheresoftware.b4a.objects.collections.Map</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="ToString2">_tostring2</name>
      <comment>Same as ToString, but returns a string array. </comment>
      <returntype>String[]</returntype>
      <parameter>
        <name>Map</name>
        <type>anywheresoftware.b4a.objects.collections.Map</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="Values">_values</name>
      <returntype>anywheresoftware.b4a.objects.collections.List</returntype>
      <parameter>
        <name>Map</name>
        <type>anywheresoftware.b4a.objects.collections.Map</type>
      </parameter>
    </method>
  </class>
  <class>
    <name>com.mathew.jmmtools.randomtools</name>
    <shortname>RandomTools</shortname>
    <method>
      <name>IsInitialized</name>
      <comment>Tests whether the object has been initialized.</comment>
      <returntype>boolean</returntype>
    </method>
    <method>
      <name DesignerName="RandomBoolean">_randomboolean</name>
      <comment>Generates a random boolean value.</comment>
      <returntype>boolean</returntype>
    </method>
    <method>
      <name DesignerName="RandomBooleans">_randombooleans</name>
      <comment>Generates Count random boolean values. </comment>
      <returntype>boolean[]</returntype>
      <parameter>
        <name>Count</name>
        <type>int</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="RandomBytes">_randombytes</name>
      <comment>Rethrns random bytes.</comment>
      <returntype>byte[]</returntype>
      <parameter>
        <name>Count</name>
        <type>int</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="RandomBytes2">_randombytes2</name>
      <comment>Returns random bytes. </comment>
      <returntype>byte[]</returntype>
      <parameter>
        <name>Count</name>
        <type>int</type>
      </parameter>
    </method>
  </class>
  <version>1.1</version>
  <author>Mathew Mayne</author>
</root>